{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1492439047230},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1492439047231},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1492439047234},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1492439047234},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1492439047235},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1492439047235},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1492439047236},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1492439047236},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1492439047237},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1492439047237},{"_id":"themes/next/_config.yml","hash":"34aeaeaa8a07a93b18e09ac4a6f0fd7ac154ac78","modified":1492440007692},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1492439047239},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1492439047239},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1492439047300},{"_id":"source/tags/index.md","hash":"1c30002eca9127eb0cca567cb8060be13ed1198b","modified":1492439925368},{"_id":"source/_posts/Idea使用.md","hash":"e910c91df0e1afee2056d6fcbee7521963cefefa","modified":1492605709836},{"_id":"source/_posts/android studio gradle详解.md","hash":"dfe788b2493aefc7d84bc805f45d63d5b9b6735c","modified":1492605709837},{"_id":"source/_posts/android support library关系详解.md","hash":"36a45597a51b0df55ada435b39fda540f82005d8","modified":1492617155030},{"_id":"source/_posts/atom使用记录.md","hash":"2346241c4741d4be7b0133106bbfdd3fb7fc56fa","modified":1492605709838},{"_id":"source/_posts/css笔记.md","hash":"75b5f75e7b4964335203fc8d52403283e5f4e6b7","modified":1492605709839},{"_id":"source/_posts/github page hexo博客同步源文件与静态文件方法.md","hash":"ee47fb2cb3489e51b0ce9f7a909e851778a58da0","modified":1492445259529},{"_id":"source/_posts/git笔记.md","hash":"a0f471395615d3a2cdd47a7e694a9ab1f0725a7b","modified":1492608162897},{"_id":"source/_posts/git遇到的问题.md","hash":"ecbaf97bb35210c84e6412d87d42e2052f518005","modified":1492607738454},{"_id":"source/_posts/gradle笔记.md","hash":"b048966d801922f2a53b30a1b04040eff1d7696d","modified":1492605709840},{"_id":"source/_posts/java编程思想笔记.md","hash":"2c52dee1e1be6f3704ee17709153a181a674128f","modified":1492617152999},{"_id":"source/_posts/tomcat笔记.md","hash":"2efc8cee56d9e1d8749024af2a15328ad1abc477","modified":1492605709841},{"_id":"source/_posts/理解javascript原型和闭包.md","hash":"8dc858cfe195013964617524cae8566a71d8c6a0","modified":1492441012586},{"_id":"source/categories/index.md","hash":"8fc58d6c4bda4dbd40db969b06152346c8ee9385","modified":1492439910588},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1492439047240},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1492439047241},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1492439047241},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1492439047242},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1492439047243},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1492439047244},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1492439047245},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1492439047246},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1492439047247},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1492439047247},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1492439047248},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1492439047249},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1492439047249},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1492439047251},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1492439047296},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1492439047296},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1492439047297},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1492439047298},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1492439047298},{"_id":"themes/next/layout/schedule.swig","hash":"459cd6d9887b7a2ebda9ba3a5585a718904adb02","modified":1492439047299},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1492439047300},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1492439047302},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1492439047303},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1492439047467},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1492439047468},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1492439047469},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492439047377},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1492439047250},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1492439047251},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1492439047252},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1492439047252},{"_id":"themes/next/layout/_macro/post.swig","hash":"79851872b6b4fbd24e4a5a946f263da85b0c265d","modified":1492439047253},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1492439047254},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1492439047255},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1492439047255},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1492439047257},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1492439047257},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1492439047258},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1492439047260},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1492439047260},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1492439047261},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1492439047262},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1492439047269},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1492439047270},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"1ada0189069e17b0dc567ae4b4ee365b2ec0c7d7","modified":1492439047272},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1492439047286},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1492439047287},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1492439047287},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1492439047288},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1492439047289},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1492439047304},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1492439047305},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1492439047306},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1492439047307},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1492439047307},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1492439047305},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1492439047376},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492439047378},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1492439047377},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1492439047378},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1492439047379},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1492439047380},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1492439047381},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1492439047381},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1492439047382},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1492439047383},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492439047384},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492439047385},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1492439047385},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1492439047385},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492439047386},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492439047271},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492439047271},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492439047357},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492439047357},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492439047358},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492439047374},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492439047375},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1492439047259},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1492439047259},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1492439047263},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1492439047264},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1492439047264},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1492439047265},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1492439047266},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1492439047267},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1492439047268},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1492439047270},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1492439047271},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1492439047274},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1492439047274},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1492439047275},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1492439047276},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1492439047276},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1492439047277},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1492439047277},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1492439047278},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1492439047278},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1492439047280},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1492439047279},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1492439047280},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1492439047281},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1492439047281},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1492439047282},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1492439047283},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1492439047283},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1492439047284},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1492439047285},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1492439047293},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1492439047293},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1492439047295},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1492439047295},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1492439047356},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1492439047358},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1492439047358},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1492439047374},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1492439047375},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1492439047375},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1492439047388},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1492439047387},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1492439047388},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1492439047389},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1492439047390},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1492439047391},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1492439047392},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1492439047393},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1492439047394},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1492439047395},{"_id":"themes/next/source/js/src/utils.js","hash":"4aceddc2ca32097a9832374da232b6f76af4d5f4","modified":1492439047395},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492439047400},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492439047396},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ef4b2877e37d65025a28eea154b33fe66351493c","modified":1492439047402},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1492439047403},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1492439047403},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1492439047421},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1492439047421},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1492439047422},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1492439047422},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1492439047423},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1492439047416},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1492439047416},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1492439047418},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1492439047418},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1492439047444},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1492439047446},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1492439047446},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1492439047447},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1492439047448},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1492439047449},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1492439047449},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1492439047451},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1492439047460},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1492439047460},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1492439047464},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1492439047465},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1492439047466},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1492439047445},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1492439047291},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1492439047291},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1492439047310},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1492439047310},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1492439047312},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1492439047312},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1492439047313},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1492439047324},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1492439047340},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1492439047352},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1492439047353},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1492439047354},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1492439047355},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1492439047355},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1492439047356},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1492439047359},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1492439047360},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1492439047360},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1492439047361},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1492439047362},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1492439047362},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1492439047363},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1492439047365},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1492439047366},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1492439047367},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1492439047367},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1492439047368},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1492439047371},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1492439047371},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1492439047370},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1492439047372},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1492439047372},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1492439047373},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1492439047393},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492439047404},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492439047405},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492439047406},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492439047407},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492439047406},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492439047407},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1492439047413},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1492439047414},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1492439047415},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1492439047425},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1492439047425},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1492439047427},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1492439047419},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492439047419},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1492439047459},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1492439047459},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1492439047441},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1492439047442},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1492439047462},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1492439047313},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1492439047315},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1492439047314},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1492439047316},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1492439047316},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1492439047317},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1492439047318},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1492439047319},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1492439047320},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1492439047321},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1492439047321},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1492439047322},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1492439047323},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1492439047324},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1492439047326},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1492439047327},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1492439047328},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1492439047328},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"fcd89ba4f6f48269e5caa73307e8689f41019896","modified":1492439047329},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1492439047329},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1492439047330},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1492439047330},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1492439047331},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1492439047331},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1492439047332},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1492439047333},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1492439047333},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1492439047334},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1492439047335},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1492439047336},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1492439047337},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1492439047337},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1492439047338},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1492439047339},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1492439047339},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1492439047340},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1492439047342},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1492439047342},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1492439047343},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1492439047344},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1492439047345},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1492439047345},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1492439047346},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1492439047347},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1492439047347},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1492439047348},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1492439047349},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1492439047350},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1492439047350},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1492439047351},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1492439047364},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1492439047365},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1492439047369},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492439047409},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1492439047409},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1492439047410},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1492439047411},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1492439047411},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1492439047412},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1492439047429},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1492439047432},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1492439047440},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1492439047400},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1492439047457},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1492439047437},{"_id":"public/tags/index.html","hash":"9e430bfd3a430d26890bf9f4dc7e4166a8f6b41c","modified":1492617169745},{"_id":"public/categories/index.html","hash":"41b60775f77c0e7ec40497d20d0c0a2c27b810ab","modified":1492617169745},{"_id":"public/2017/04/11/gradle笔记/index.html","hash":"ebaaf4d7018fd1e410aeff9152b75ab10d95927f","modified":1492617169745},{"_id":"public/2017/04/19/git遇到的问题/index.html","hash":"e6e84c3b09b0549a72c8e370907007a2821f5f1a","modified":1492617169745},{"_id":"public/2017/04/19/java编程思想笔记/index.html","hash":"6ed02cf475395d6eef8b7bb47c2bfad1a8051302","modified":1492617169746},{"_id":"public/archives/index.html","hash":"d5eac9c53d66ddfdbad6c7629a79a38066e67aa3","modified":1492617169746},{"_id":"public/archives/page/2/index.html","hash":"9ab6648006d82dc0d1877f1a88582010345cffdb","modified":1492617169746},{"_id":"public/archives/2017/index.html","hash":"13414fa994c65b4f2de3d597581e96f7fad07df7","modified":1492617169746},{"_id":"public/archives/2017/page/2/index.html","hash":"7e45ef5644d9b853d9fb1c7d6b222bd97d573715","modified":1492617169746},{"_id":"public/archives/2017/04/index.html","hash":"75e88136dec8f475f03b93de8e1269190e69fdcc","modified":1492617169746},{"_id":"public/archives/2017/04/page/2/index.html","hash":"7ac3ab4694395e6f8e34f596481004298a9279dd","modified":1492617169746},{"_id":"public/categories/idea相关/index.html","hash":"f1fe74d717366d75d33af7cb073445efb71f3832","modified":1492617169746},{"_id":"public/categories/android相关/index.html","hash":"5541be9b2a9e7cfcaa82770baf6d84ced638d4db","modified":1492617169746},{"_id":"public/categories/atom相关/index.html","hash":"6c8341c793d45dd50ebac950c647b9a797bee949","modified":1492617169746},{"_id":"public/categories/css相关/index.html","hash":"810da72f46f84da0d59ffa3682279228fbf11523","modified":1492617169746},{"_id":"public/categories/GitHub-Pages-博客相关/index.html","hash":"b309eef50c92c28c2ab2dbb6088a29bfd59a83b0","modified":1492617169746},{"_id":"public/categories/git相关/index.html","hash":"5cb635ee8be1803aa77ab1764e6c9ac2c81c7399","modified":1492617169746},{"_id":"public/categories/java相关/index.html","hash":"a389e1c5ad9d8e59a9fed5612be9fa1a48f7370e","modified":1492617169746},{"_id":"public/categories/gradle相关/index.html","hash":"5e6396e4aed4a89d3f23078a3e515282b081e506","modified":1492617169746},{"_id":"public/categories/tomcat相关/index.html","hash":"e01ac522201e57372fc645840c1c85877e38e6e8","modified":1492617169746},{"_id":"public/categories/JavaScript相关/index.html","hash":"44a7fcbe752347a2e2185771ff515cf77e371d12","modified":1492617169746},{"_id":"public/page/2/index.html","hash":"48d9fd41d282c67ac9072a6842bfa6d54181404d","modified":1492617169747},{"_id":"public/tags/idea/index.html","hash":"b25ac8fb8730093280ea237f643e64dea7cd2128","modified":1492617169747},{"_id":"public/tags/android/index.html","hash":"2ff6a0ef7eca6f7a78e80006ba930987b197c598","modified":1492617169747},{"_id":"public/tags/gradle/index.html","hash":"e48c08d9e6d1431cc99dec8994da03cf96280f3a","modified":1492617169747},{"_id":"public/tags/atom/index.html","hash":"bce6081ebaa3dc4e2c7f966f12637cd20ab9506c","modified":1492617169747},{"_id":"public/tags/css/index.html","hash":"37068ec0f74b15a818344c3784c3ae5c3bbc2ef0","modified":1492617169747},{"_id":"public/tags/hexo/index.html","hash":"cd4b2601f8a5b4e937003aa12a6a2d5e0583fa52","modified":1492617169747},{"_id":"public/tags/git/index.html","hash":"b3e233a2e1697b35f7ac665fce79466d5e840af0","modified":1492617169747},{"_id":"public/tags/java/index.html","hash":"df50e0467e4e762cb8c043a08698dded2dd842c5","modified":1492617169747},{"_id":"public/tags/tomcat/index.html","hash":"64fb7ee188003eb09dd09f43ed227f5c29a2f88d","modified":1492617169747},{"_id":"public/tags/javascript/index.html","hash":"0df982f979b539d8f6a6dc3bfb94534f45d652c4","modified":1492617169747},{"_id":"public/tags/闭包/index.html","hash":"a17f08190822330c0eb2853f9ed8f3f1b5f68a33","modified":1492617169747},{"_id":"public/2017/04/12/css笔记/index.html","hash":"4441a98e3df0434de28a050059dc6fd259b9855a","modified":1492617169747},{"_id":"public/2017/04/12/git笔记/index.html","hash":"45783d88666a6c8bd3c105f1ebba46b5bb920cb4","modified":1492617169747},{"_id":"public/2017/04/12/tomcat笔记/index.html","hash":"fc792ff610dc40222bdc7b7d904fbc44abcf8d54","modified":1492617169747},{"_id":"public/2017/04/13/Idea使用/index.html","hash":"d7bc75399642c5160584e8aec3c9a044d3ea3206","modified":1492617169747},{"_id":"public/2017/04/13/atom使用记录/index.html","hash":"6328e74c4185920a1486d8ea5e03fb639c1b9f46","modified":1492617169747},{"_id":"public/2017/04/15/android studio gradle详解/index.html","hash":"99d4663c71b9d498ebe295fb2dd2f8e3b2c57186","modified":1492617169747},{"_id":"public/2017/04/17/理解javascript原型和闭包/index.html","hash":"41f51adf69fab5c45ae28447a7862e9422823396","modified":1492617169748},{"_id":"public/2017/04/17/github page hexo博客同步源文件与静态文件方法/index.html","hash":"afd00dd000f460e8bf427a4abca782eb6b632197","modified":1492617169748},{"_id":"public/2017/04/18/android support library关系详解/index.html","hash":"4ba580654e85d855702384320ceae27c99da4ca9","modified":1492617169748},{"_id":"public/index.html","hash":"6890463851ff9e2ee63cf3c50a5be16c73fe5384","modified":1492617169748},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492617169780},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1492617169780},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1492617169780},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1492617169780},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1492617169780},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1492617169780},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1492617169780},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1492617169780},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1492617169780},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492617169780},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492617169780},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1492617169780},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1492617169780},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492617169780},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1492617169780},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1492617169781},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492617169781},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492617169781},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492617169781},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492617169781},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492617169781},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492617169781},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1492617169781},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492617169781},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1492617170492},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1492617170496},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1492617170508},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1492617170508},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1492617170508},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1492617170508},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1492617170508},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1492617170508},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1492617170508},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1492617170508},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1492617170508},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1492617170508},{"_id":"public/js/src/utils.js","hash":"2041eae5ac81c392067bfbd1bba4399cb37beea1","modified":1492617170508},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492617170508},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"b614b73ba49ca9136fed7c387ee8df72fe65118f","modified":1492617170508},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492617170508},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1492617170508},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1492617170509},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1492617170509},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1492617170509},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1492617170509},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1492617170509},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1492617170509},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1492617170509},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1492617170509},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1492617170509},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1492617170509},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1492617170509},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492617170509},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1492617170509},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1492617170509},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1492617170509},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1492617170510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1492617170510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1492617170510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1492617170510},{"_id":"public/css/main.css","hash":"7c0cc975f3d6ad11b840be1b7fa29bc368d8b7bd","modified":1492617170510},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1492617170510},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1492617170510},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1492617170510},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1492617170510},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1492617170510},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1492617170510},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1492617170510},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1492617170510},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1492617170510},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1492617170510},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1492617170510},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1492617170510},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1492617170511},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1492617170511},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1492617170511},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1492617170533}],"Category":[{"name":"idea相关","_id":"cj1p5q11h0004dkw32twtuxf7"},{"name":"android相关","_id":"cj1p5q11v0009dkw3ylg5z9pb"},{"name":"atom相关","_id":"cj1p5q129000kdkw3s7okq492"},{"name":"css相关","_id":"cj1p5q12g000rdkw3m9feu9ma"},{"name":"GitHub Pages 博客相关","_id":"cj1p5q12k000xdkw3pbr6zkwl"},{"name":"git相关","_id":"cj1p5q12m0011dkw30gjhhgoq"},{"name":"java相关","_id":"cj1p5q12s0019dkw30vlsma0r"},{"name":"gradle相关","_id":"cj1p5q12x001ddkw3ij37lq17"},{"name":"tomcat相关","_id":"cj1p5q130001hdkw3azkjb8xx"},{"name":"JavaScript相关","_id":"cj1p5q131001ldkw38nzvrf42"}],"Data":[],"Page":[{"title":"标签","date":"2017-04-17T14:36:41.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-04-17 22:36:41\ntype: \"tags\"\n---\n","updated":"2017-04-17T14:38:45.368Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj1p5q10u0000dkw3nkifa1w8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2017-04-17T14:37:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-04-17 22:37:33\ntype: \"categories\"\n---\n","updated":"2017-04-17T14:38:30.588Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj1p5q1130002dkw3pxxp5hrv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"idea使用记录","date":"2017-04-13T11:23:21.000Z","_content":"\n1. Idea 把\"Mark Directory As...\"的文件夹都加入CLASSPATH。\n\n2. Facets 表示这个module有什么特征，比如 Web，Spring和Hibernate等；\n\n3. Artifact 是maven中的一个概念，表示某个module要如何打包，例如war exploded、war、jar、ear等等这种打包形式；\n一个module有了 Artifacts 就可以部署到应用服务器中了！\n\n4. 在给项目配置Artifacts的时候有好多个type的选项，exploed是什么意思：\n> 1. explode 在这里你可以理解为展开，不压缩的意思。也就是war、jar等产出物没压缩前的目录结构。建议在开发的时候使用这种模式，便于修改了文件的效果立刻显现出来。\n> 2. 默认情况下，IDEA的 Modules 和 Artifacts 的 output目录 已经设置好了，不需要更改，打成 war包 的时候会自动在 WEB-INF目录 下生产 classes目录，然后把编译后的文件放进去。\n\n5. Java artifact是什么意思，maven一直用，但是不明白中文意思？\n> artifact你把它理解成“生成的东西”就差不多了。这个词强调的是这是你软件生产过程中某一步的产生物，不像程序本身，或者是配置文件这些，是你手写出来的。\n\n6. 当点击运行tomcat时，Idea开始做以下事情：\n> 1. 运行server前会做一次编译。编译后class文件存放在指定的项目编译输出目录下.\n> 2. 根据artifact中的设定对目录结构进行创建.\n> 3. 拷贝web资源的根目录下的所有文件到artifact的目录下.\n> 4. 拷贝编译输出目录下的classes目录到artifact下的WEB-INF下.\n> 5. 拷贝lib目录下所需的jar包到artifact下的WEB_INF下.\n> 6. 运行server，运行成功后，如有需要，会自动打开浏览器访问指定url.\n\n7. 文件编码设置（Ctlr+Alt+S): **Editor**->**Code Style**->**File Encodings**,三个地方编码都设为UTF-8.\n\n8. 实时代码模板**Live Templates**：可以补全如 System.Out.Println之类的语句。\n> 1. 调用。调用常规的实时代码模板主要是通过两个快捷键：Tab 和 Ctrl + J。如：sys+tab\n> 2. 设置。**Editor**->**Code Style**->**Live Templates**。\n\n9. 文件代码模板**File and Code Templates**:可以设置在新建文件时的文件描述、作者等信息。\n> 设置。**Editor**->**Code Style**->**File and Code Templates**。\n\n10. 后缀代码模板**Postfix Completion**：比实时代码模板更加便捷一点点的补全，功能本质上也是代码模板。\n> 1. 使用。输入`o.notnull`按**Tab**键，代码就会变为`if (o != null)`\n> 设置。**Editor**->**General**->**Postfix Completion**。\n\n11. IntelliJ IDEA 对插件进行了很好的分类：\n    * All plugins 显示所有插件。\n    * Enabled 显示当前所有已经启用的插件。\n    * Disabled 显示当期那所有已经禁用的插件。\n    * Bundled 显示所有 IntelliJ IDEA 自带的插件。\n    * Custom 显示所有我们自行安装的插件，如果你自己装了很多次插件的话，这个选项会用得比较多。\n\n12. Debug 常用快捷键:\n    * F7 : 进入下一步，进入方法体。\n    * F8 ：进入下一步，不进入方法体。\n    * F9 ：恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上\n\n---\n### 常用快捷键\n快捷键  |   介绍\n--|--\n Ctrl + Alt + S |  格式化代码，可以对当前文件和整个包目录使用 （必备）\n Ctrl + Alt + O |  优化导入的类，可以对当前文件和整个包目录使用 （必备）\n Ctrl + Alt + T |  对选中的代码弹出环绕选项弹出层 （必备）\n Ctrl + F |  在当前文件进行文本查找 （必备）\n Ctrl + Shift + F | 根据输入内容查找整个项目 或 指定目录内文件 （必备）\n Ctrl + E |  显示最近打开的文件记录列表 （必备）\n Ctrl + N\t |  根据输入的 类名 查找类文件 （必备）\n Ctrl + Shift + N | 通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）\n Ctrl + P |  方法参数提示显示 （必备）\n Ctrl + Shift + Alt + S |  打开当前项目设置 （必备）\n Alt + F7 | 查找光标所在的方法 / 变量 / 类被调用的地方\n Ctrl + Shift + A | 可以查找所有Intellij的命令，并且每个命令后面还有其快捷键\n Ctrl + W | 递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）\n Shift + Shift |  在项目的所有目录查找，包括类、资源、配置项、方法等等\n","source":"_posts/Idea使用.md","raw":"---\ntitle: idea使用记录\ndate: 2017-04-13 19:23:21\ntags:\n  - idea\ncategories: idea相关\n---\n\n1. Idea 把\"Mark Directory As...\"的文件夹都加入CLASSPATH。\n\n2. Facets 表示这个module有什么特征，比如 Web，Spring和Hibernate等；\n\n3. Artifact 是maven中的一个概念，表示某个module要如何打包，例如war exploded、war、jar、ear等等这种打包形式；\n一个module有了 Artifacts 就可以部署到应用服务器中了！\n\n4. 在给项目配置Artifacts的时候有好多个type的选项，exploed是什么意思：\n> 1. explode 在这里你可以理解为展开，不压缩的意思。也就是war、jar等产出物没压缩前的目录结构。建议在开发的时候使用这种模式，便于修改了文件的效果立刻显现出来。\n> 2. 默认情况下，IDEA的 Modules 和 Artifacts 的 output目录 已经设置好了，不需要更改，打成 war包 的时候会自动在 WEB-INF目录 下生产 classes目录，然后把编译后的文件放进去。\n\n5. Java artifact是什么意思，maven一直用，但是不明白中文意思？\n> artifact你把它理解成“生成的东西”就差不多了。这个词强调的是这是你软件生产过程中某一步的产生物，不像程序本身，或者是配置文件这些，是你手写出来的。\n\n6. 当点击运行tomcat时，Idea开始做以下事情：\n> 1. 运行server前会做一次编译。编译后class文件存放在指定的项目编译输出目录下.\n> 2. 根据artifact中的设定对目录结构进行创建.\n> 3. 拷贝web资源的根目录下的所有文件到artifact的目录下.\n> 4. 拷贝编译输出目录下的classes目录到artifact下的WEB-INF下.\n> 5. 拷贝lib目录下所需的jar包到artifact下的WEB_INF下.\n> 6. 运行server，运行成功后，如有需要，会自动打开浏览器访问指定url.\n\n7. 文件编码设置（Ctlr+Alt+S): **Editor**->**Code Style**->**File Encodings**,三个地方编码都设为UTF-8.\n\n8. 实时代码模板**Live Templates**：可以补全如 System.Out.Println之类的语句。\n> 1. 调用。调用常规的实时代码模板主要是通过两个快捷键：Tab 和 Ctrl + J。如：sys+tab\n> 2. 设置。**Editor**->**Code Style**->**Live Templates**。\n\n9. 文件代码模板**File and Code Templates**:可以设置在新建文件时的文件描述、作者等信息。\n> 设置。**Editor**->**Code Style**->**File and Code Templates**。\n\n10. 后缀代码模板**Postfix Completion**：比实时代码模板更加便捷一点点的补全，功能本质上也是代码模板。\n> 1. 使用。输入`o.notnull`按**Tab**键，代码就会变为`if (o != null)`\n> 设置。**Editor**->**General**->**Postfix Completion**。\n\n11. IntelliJ IDEA 对插件进行了很好的分类：\n    * All plugins 显示所有插件。\n    * Enabled 显示当前所有已经启用的插件。\n    * Disabled 显示当期那所有已经禁用的插件。\n    * Bundled 显示所有 IntelliJ IDEA 自带的插件。\n    * Custom 显示所有我们自行安装的插件，如果你自己装了很多次插件的话，这个选项会用得比较多。\n\n12. Debug 常用快捷键:\n    * F7 : 进入下一步，进入方法体。\n    * F8 ：进入下一步，不进入方法体。\n    * F9 ：恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上\n\n---\n### 常用快捷键\n快捷键  |   介绍\n--|--\n Ctrl + Alt + S |  格式化代码，可以对当前文件和整个包目录使用 （必备）\n Ctrl + Alt + O |  优化导入的类，可以对当前文件和整个包目录使用 （必备）\n Ctrl + Alt + T |  对选中的代码弹出环绕选项弹出层 （必备）\n Ctrl + F |  在当前文件进行文本查找 （必备）\n Ctrl + Shift + F | 根据输入内容查找整个项目 或 指定目录内文件 （必备）\n Ctrl + E |  显示最近打开的文件记录列表 （必备）\n Ctrl + N\t |  根据输入的 类名 查找类文件 （必备）\n Ctrl + Shift + N | 通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）\n Ctrl + P |  方法参数提示显示 （必备）\n Ctrl + Shift + Alt + S |  打开当前项目设置 （必备）\n Alt + F7 | 查找光标所在的方法 / 变量 / 类被调用的地方\n Ctrl + Shift + A | 可以查找所有Intellij的命令，并且每个命令后面还有其快捷键\n Ctrl + W | 递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）\n Shift + Shift |  在项目的所有目录查找，包括类、资源、配置项、方法等等\n","slug":"Idea使用","published":1,"updated":"2017-04-19T12:41:49.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q10x0001dkw33lqs6ajc","content":"<ol>\n<li><p>Idea 把”Mark Directory As…”的文件夹都加入CLASSPATH。</p>\n</li>\n<li><p>Facets 表示这个module有什么特征，比如 Web，Spring和Hibernate等；</p>\n</li>\n<li><p>Artifact 是maven中的一个概念，表示某个module要如何打包，例如war exploded、war、jar、ear等等这种打包形式；<br>一个module有了 Artifacts 就可以部署到应用服务器中了！</p>\n</li>\n<li><p>在给项目配置Artifacts的时候有好多个type的选项，exploed是什么意思：</p>\n<blockquote>\n<ol>\n<li>explode 在这里你可以理解为展开，不压缩的意思。也就是war、jar等产出物没压缩前的目录结构。建议在开发的时候使用这种模式，便于修改了文件的效果立刻显现出来。</li>\n<li>默认情况下，IDEA的 Modules 和 Artifacts 的 output目录 已经设置好了，不需要更改，打成 war包 的时候会自动在 WEB-INF目录 下生产 classes目录，然后把编译后的文件放进去。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>Java artifact是什么意思，maven一直用，但是不明白中文意思？</p>\n<blockquote>\n<p>artifact你把它理解成“生成的东西”就差不多了。这个词强调的是这是你软件生产过程中某一步的产生物，不像程序本身，或者是配置文件这些，是你手写出来的。</p>\n</blockquote>\n</li>\n<li><p>当点击运行tomcat时，Idea开始做以下事情：</p>\n<blockquote>\n<ol>\n<li>运行server前会做一次编译。编译后class文件存放在指定的项目编译输出目录下.</li>\n<li>根据artifact中的设定对目录结构进行创建.</li>\n<li>拷贝web资源的根目录下的所有文件到artifact的目录下.</li>\n<li>拷贝编译输出目录下的classes目录到artifact下的WEB-INF下.</li>\n<li>拷贝lib目录下所需的jar包到artifact下的WEB_INF下.</li>\n<li>运行server，运行成功后，如有需要，会自动打开浏览器访问指定url.</li>\n</ol>\n</blockquote>\n</li>\n<li><p>文件编码设置（Ctlr+Alt+S): <strong>Editor</strong>-&gt;<strong>Code Style</strong>-&gt;<strong>File Encodings</strong>,三个地方编码都设为UTF-8.</p>\n</li>\n<li><p>实时代码模板<strong>Live Templates</strong>：可以补全如 System.Out.Println之类的语句。</p>\n<blockquote>\n<ol>\n<li>调用。调用常规的实时代码模板主要是通过两个快捷键：Tab 和 Ctrl + J。如：sys+tab</li>\n<li>设置。<strong>Editor</strong>-&gt;<strong>Code Style</strong>-&gt;<strong>Live Templates</strong>。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>文件代码模板<strong>File and Code Templates</strong>:可以设置在新建文件时的文件描述、作者等信息。</p>\n<blockquote>\n<p>设置。<strong>Editor</strong>-&gt;<strong>Code Style</strong>-&gt;<strong>File and Code Templates</strong>。</p>\n</blockquote>\n</li>\n<li><p>后缀代码模板<strong>Postfix Completion</strong>：比实时代码模板更加便捷一点点的补全，功能本质上也是代码模板。</p>\n<blockquote>\n<ol>\n<li>使用。输入<code>o.notnull</code>按<strong>Tab</strong>键，代码就会变为<code>if (o != null)</code><br>设置。<strong>Editor</strong>-&gt;<strong>General</strong>-&gt;<strong>Postfix Completion</strong>。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>IntelliJ IDEA 对插件进行了很好的分类：</p>\n<ul>\n<li>All plugins 显示所有插件。</li>\n<li>Enabled 显示当前所有已经启用的插件。</li>\n<li>Disabled 显示当期那所有已经禁用的插件。</li>\n<li>Bundled 显示所有 IntelliJ IDEA 自带的插件。</li>\n<li>Custom 显示所有我们自行安装的插件，如果你自己装了很多次插件的话，这个选项会用得比较多。</li>\n</ul>\n</li>\n<li><p>Debug 常用快捷键:</p>\n<ul>\n<li>F7 : 进入下一步，进入方法体。</li>\n<li>F8 ：进入下一步，不进入方法体。</li>\n<li>F9 ：恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> Ctrl + Alt + S</td>\n<td>格式化代码，可以对当前文件和整个包目录使用 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Alt + O</td>\n<td>优化导入的类，可以对当前文件和整个包目录使用 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Alt + T</td>\n<td>对选中的代码弹出环绕选项弹出层 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + F</td>\n<td>在当前文件进行文本查找 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Shift + F</td>\n<td>根据输入内容查找整个项目 或 指定目录内文件 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + E</td>\n<td>显示最近打开的文件记录列表 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + N</td>\n<td>根据输入的 类名 查找类文件 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Shift + N</td>\n<td>通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + P</td>\n<td>方法参数提示显示 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Shift + Alt + S</td>\n<td>打开当前项目设置 （必备）</td>\n</tr>\n<tr>\n<td> Alt + F7</td>\n<td>查找光标所在的方法 / 变量 / 类被调用的地方</td>\n</tr>\n<tr>\n<td> Ctrl + Shift + A</td>\n<td>可以查找所有Intellij的命令，并且每个命令后面还有其快捷键</td>\n</tr>\n<tr>\n<td> Ctrl + W</td>\n<td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）</td>\n</tr>\n<tr>\n<td> Shift + Shift</td>\n<td>在项目的所有目录查找，包括类、资源、配置项、方法等等</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>Idea 把”Mark Directory As…”的文件夹都加入CLASSPATH。</p>\n</li>\n<li><p>Facets 表示这个module有什么特征，比如 Web，Spring和Hibernate等；</p>\n</li>\n<li><p>Artifact 是maven中的一个概念，表示某个module要如何打包，例如war exploded、war、jar、ear等等这种打包形式；<br>一个module有了 Artifacts 就可以部署到应用服务器中了！</p>\n</li>\n<li><p>在给项目配置Artifacts的时候有好多个type的选项，exploed是什么意思：</p>\n<blockquote>\n<ol>\n<li>explode 在这里你可以理解为展开，不压缩的意思。也就是war、jar等产出物没压缩前的目录结构。建议在开发的时候使用这种模式，便于修改了文件的效果立刻显现出来。</li>\n<li>默认情况下，IDEA的 Modules 和 Artifacts 的 output目录 已经设置好了，不需要更改，打成 war包 的时候会自动在 WEB-INF目录 下生产 classes目录，然后把编译后的文件放进去。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>Java artifact是什么意思，maven一直用，但是不明白中文意思？</p>\n<blockquote>\n<p>artifact你把它理解成“生成的东西”就差不多了。这个词强调的是这是你软件生产过程中某一步的产生物，不像程序本身，或者是配置文件这些，是你手写出来的。</p>\n</blockquote>\n</li>\n<li><p>当点击运行tomcat时，Idea开始做以下事情：</p>\n<blockquote>\n<ol>\n<li>运行server前会做一次编译。编译后class文件存放在指定的项目编译输出目录下.</li>\n<li>根据artifact中的设定对目录结构进行创建.</li>\n<li>拷贝web资源的根目录下的所有文件到artifact的目录下.</li>\n<li>拷贝编译输出目录下的classes目录到artifact下的WEB-INF下.</li>\n<li>拷贝lib目录下所需的jar包到artifact下的WEB_INF下.</li>\n<li>运行server，运行成功后，如有需要，会自动打开浏览器访问指定url.</li>\n</ol>\n</blockquote>\n</li>\n<li><p>文件编码设置（Ctlr+Alt+S): <strong>Editor</strong>-&gt;<strong>Code Style</strong>-&gt;<strong>File Encodings</strong>,三个地方编码都设为UTF-8.</p>\n</li>\n<li><p>实时代码模板<strong>Live Templates</strong>：可以补全如 System.Out.Println之类的语句。</p>\n<blockquote>\n<ol>\n<li>调用。调用常规的实时代码模板主要是通过两个快捷键：Tab 和 Ctrl + J。如：sys+tab</li>\n<li>设置。<strong>Editor</strong>-&gt;<strong>Code Style</strong>-&gt;<strong>Live Templates</strong>。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>文件代码模板<strong>File and Code Templates</strong>:可以设置在新建文件时的文件描述、作者等信息。</p>\n<blockquote>\n<p>设置。<strong>Editor</strong>-&gt;<strong>Code Style</strong>-&gt;<strong>File and Code Templates</strong>。</p>\n</blockquote>\n</li>\n<li><p>后缀代码模板<strong>Postfix Completion</strong>：比实时代码模板更加便捷一点点的补全，功能本质上也是代码模板。</p>\n<blockquote>\n<ol>\n<li>使用。输入<code>o.notnull</code>按<strong>Tab</strong>键，代码就会变为<code>if (o != null)</code><br>设置。<strong>Editor</strong>-&gt;<strong>General</strong>-&gt;<strong>Postfix Completion</strong>。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>IntelliJ IDEA 对插件进行了很好的分类：</p>\n<ul>\n<li>All plugins 显示所有插件。</li>\n<li>Enabled 显示当前所有已经启用的插件。</li>\n<li>Disabled 显示当期那所有已经禁用的插件。</li>\n<li>Bundled 显示所有 IntelliJ IDEA 自带的插件。</li>\n<li>Custom 显示所有我们自行安装的插件，如果你自己装了很多次插件的话，这个选项会用得比较多。</li>\n</ul>\n</li>\n<li><p>Debug 常用快捷键:</p>\n<ul>\n<li>F7 : 进入下一步，进入方法体。</li>\n<li>F8 ：进入下一步，不进入方法体。</li>\n<li>F9 ：恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> Ctrl + Alt + S</td>\n<td>格式化代码，可以对当前文件和整个包目录使用 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Alt + O</td>\n<td>优化导入的类，可以对当前文件和整个包目录使用 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Alt + T</td>\n<td>对选中的代码弹出环绕选项弹出层 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + F</td>\n<td>在当前文件进行文本查找 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Shift + F</td>\n<td>根据输入内容查找整个项目 或 指定目录内文件 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + E</td>\n<td>显示最近打开的文件记录列表 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + N</td>\n<td>根据输入的 类名 查找类文件 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Shift + N</td>\n<td>通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + P</td>\n<td>方法参数提示显示 （必备）</td>\n</tr>\n<tr>\n<td> Ctrl + Shift + Alt + S</td>\n<td>打开当前项目设置 （必备）</td>\n</tr>\n<tr>\n<td> Alt + F7</td>\n<td>查找光标所在的方法 / 变量 / 类被调用的地方</td>\n</tr>\n<tr>\n<td> Ctrl + Shift + A</td>\n<td>可以查找所有Intellij的命令，并且每个命令后面还有其快捷键</td>\n</tr>\n<tr>\n<td> Ctrl + W</td>\n<td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）</td>\n</tr>\n<tr>\n<td> Shift + Shift</td>\n<td>在项目的所有目录查找，包括类、资源、配置项、方法等等</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"android studio gradle详解","date":"2017-04-15T11:41:59.000Z","_content":"\n### gradle版本问题\n1. gradle包的版本,在项目的gradle/wrapper目录下面有个gradle-wrapper.properties中有如下内容：\n`distributionUrl=https\\://services.gradle.org/distributions/gradle-2.2.1-all.zip`\n    >团队中人员A,B,C，每个人都有自己的电脑和配置，如何能保证A,B,C使用同一个版本得gradle来编译项目呢，gradle wrapper就用来干这个\n\n2. gradle插件的版本,是android studio为了方便使用gradle进行配置和编译而开发的插件,项目的根目录下的build.gradle中会配置如下代码:\n    ```\n    buildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.0'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n    }\n    ```\n3. gradle 与 gradlew: W意思是wrapper，它是一个用bash命令包装过的gradle编译启动脚本，里面会进行环境变量检测和设置。最终进行编译的还是gradle;Gradlew是包装器，自动下载包装里定义好的gradle 版本，保证编译环境统一，gradle 是用本地的gradle\n\n4. [gradle插件与包版本对应相关](https://developer.android.com/studio/releases/gradle-plugin.html)如下：\n    > Plugin version 2.0.0 - 2.1.2 ----> Gradle version 2.10 - 2.13\n    > Plugin version 2.1.3 - 2.2.3 ----> Gradle version 2.14.1+\n    > Plugin version 2.3.0+ ----> Gradle version 3.3+\n\n5. 导入其它项目时修改gradle版本问题：\n    > 1. 修改gradle插件的版本，在项目根目录下的build.gradle中修改\n    > ```\n    > dependencies {\n    >    classpath\n    > 'com.android.tools.build:gradle:2.2.3'\n    > }\n    > ```\n    > 2. 修改gradle的版本，在项目的gradle/wrapper目录下面有个gradle-wrapper.properties中修改\n    > `distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip`\n    > 3. 查看当前系统安装了哪些版本的gradle，`C:\\Users\\suyf\\.gradle\\wrapper\\dists`\n\n6. 手动安装gradle版步骤：\n    > 1.下载对应版本的[gradle zip](https://services.gradle.org/distributions)包.\n    > 2. 把zip放到相应目录，不需要解压`C:\\Users\\suyf\\.gradle\\wrapper\\dists\\gradle-2.14.1-all\\8bnwg5hd3w55iofp58khbp6yv`\n    > 3. 这个目录最好先让android studio 自己生成好后，取消自己fetch文件，然后自己去下载好gradle-xxx-all-zip文件，放到对应的目录下.\n\n7. Eclipse有个打开文件就自动展开目录的功能，在IntelliJ里从Project左边栏的齿轮上选择Autoscroll to Source和Autoscroll from Source都勾选上即可。\n","source":"_posts/android studio gradle详解.md","raw":"---\ntitle: android studio gradle详解\ndate: 2017-04-15 19:41:59\ntags:\n  - android\n  - gradle\ncategories: android相关\n---\n\n### gradle版本问题\n1. gradle包的版本,在项目的gradle/wrapper目录下面有个gradle-wrapper.properties中有如下内容：\n`distributionUrl=https\\://services.gradle.org/distributions/gradle-2.2.1-all.zip`\n    >团队中人员A,B,C，每个人都有自己的电脑和配置，如何能保证A,B,C使用同一个版本得gradle来编译项目呢，gradle wrapper就用来干这个\n\n2. gradle插件的版本,是android studio为了方便使用gradle进行配置和编译而开发的插件,项目的根目录下的build.gradle中会配置如下代码:\n    ```\n    buildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.0'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n    }\n    ```\n3. gradle 与 gradlew: W意思是wrapper，它是一个用bash命令包装过的gradle编译启动脚本，里面会进行环境变量检测和设置。最终进行编译的还是gradle;Gradlew是包装器，自动下载包装里定义好的gradle 版本，保证编译环境统一，gradle 是用本地的gradle\n\n4. [gradle插件与包版本对应相关](https://developer.android.com/studio/releases/gradle-plugin.html)如下：\n    > Plugin version 2.0.0 - 2.1.2 ----> Gradle version 2.10 - 2.13\n    > Plugin version 2.1.3 - 2.2.3 ----> Gradle version 2.14.1+\n    > Plugin version 2.3.0+ ----> Gradle version 3.3+\n\n5. 导入其它项目时修改gradle版本问题：\n    > 1. 修改gradle插件的版本，在项目根目录下的build.gradle中修改\n    > ```\n    > dependencies {\n    >    classpath\n    > 'com.android.tools.build:gradle:2.2.3'\n    > }\n    > ```\n    > 2. 修改gradle的版本，在项目的gradle/wrapper目录下面有个gradle-wrapper.properties中修改\n    > `distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip`\n    > 3. 查看当前系统安装了哪些版本的gradle，`C:\\Users\\suyf\\.gradle\\wrapper\\dists`\n\n6. 手动安装gradle版步骤：\n    > 1.下载对应版本的[gradle zip](https://services.gradle.org/distributions)包.\n    > 2. 把zip放到相应目录，不需要解压`C:\\Users\\suyf\\.gradle\\wrapper\\dists\\gradle-2.14.1-all\\8bnwg5hd3w55iofp58khbp6yv`\n    > 3. 这个目录最好先让android studio 自己生成好后，取消自己fetch文件，然后自己去下载好gradle-xxx-all-zip文件，放到对应的目录下.\n\n7. Eclipse有个打开文件就自动展开目录的功能，在IntelliJ里从Project左边栏的齿轮上选择Autoscroll to Source和Autoscroll from Source都勾选上即可。\n","slug":"android studio gradle详解","published":1,"updated":"2017-04-19T12:41:49.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q1150003dkw32bny7ol8","content":"<h3 id=\"gradle版本问题\"><a href=\"#gradle版本问题\" class=\"headerlink\" title=\"gradle版本问题\"></a>gradle版本问题</h3><ol>\n<li><p>gradle包的版本,在项目的gradle/wrapper目录下面有个gradle-wrapper.properties中有如下内容：<br><code>distributionUrl=https\\://services.gradle.org/distributions/gradle-2.2.1-all.zip</code></p>\n<blockquote>\n<p>团队中人员A,B,C，每个人都有自己的电脑和配置，如何能保证A,B,C使用同一个版本得gradle来编译项目呢，gradle wrapper就用来干这个</p>\n</blockquote>\n</li>\n<li><p>gradle插件的版本,是android studio为了方便使用gradle进行配置和编译而开发的插件,项目的根目录下的build.gradle中会配置如下代码:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">repositories &#123;</div><div class=\"line\">    jcenter()</div><div class=\"line\">&#125;</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    classpath &apos;com.android.tools.build:gradle:2.3.0&apos;</div><div class=\"line\"></div><div class=\"line\">    // NOTE: Do not place your application dependencies here; they belong</div><div class=\"line\">    // in the individual module build.gradle files</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>gradle 与 gradlew: W意思是wrapper，它是一个用bash命令包装过的gradle编译启动脚本，里面会进行环境变量检测和设置。最终进行编译的还是gradle;Gradlew是包装器，自动下载包装里定义好的gradle 版本，保证编译环境统一，gradle 是用本地的gradle</p>\n</li>\n<li><p><a href=\"https://developer.android.com/studio/releases/gradle-plugin.html\" target=\"_blank\" rel=\"external\">gradle插件与包版本对应相关</a>如下：</p>\n<blockquote>\n<p>Plugin version 2.0.0 - 2.1.2 —-&gt; Gradle version 2.10 - 2.13<br>Plugin version 2.1.3 - 2.2.3 —-&gt; Gradle version 2.14.1+<br>Plugin version 2.3.0+ —-&gt; Gradle version 3.3+</p>\n</blockquote>\n</li>\n<li><p>导入其它项目时修改gradle版本问题：</p>\n<blockquote>\n<ol>\n<li><p>修改gradle插件的版本，在项目根目录下的build.gradle中修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; dependencies &#123;</div><div class=\"line\">&gt;    classpath</div><div class=\"line\">&gt; &apos;com.android.tools.build:gradle:2.2.3&apos;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改gradle的版本，在项目的gradle/wrapper目录下面有个gradle-wrapper.properties中修改<br><code>distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip</code></p>\n</li>\n<li>查看当前系统安装了哪些版本的gradle，<code>C:\\Users\\suyf\\.gradle\\wrapper\\dists</code></li>\n</ol>\n</blockquote>\n</li>\n<li><p>手动安装gradle版步骤：</p>\n<blockquote>\n<p>1.下载对应版本的<a href=\"https://services.gradle.org/distributions\" target=\"_blank\" rel=\"external\">gradle zip</a>包.</p>\n<ol>\n<li>把zip放到相应目录，不需要解压<code>C:\\Users\\suyf\\.gradle\\wrapper\\dists\\gradle-2.14.1-all\\8bnwg5hd3w55iofp58khbp6yv</code></li>\n<li>这个目录最好先让android studio 自己生成好后，取消自己fetch文件，然后自己去下载好gradle-xxx-all-zip文件，放到对应的目录下.</li>\n</ol>\n</blockquote>\n</li>\n<li><p>Eclipse有个打开文件就自动展开目录的功能，在IntelliJ里从Project左边栏的齿轮上选择Autoscroll to Source和Autoscroll from Source都勾选上即可。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"gradle版本问题\"><a href=\"#gradle版本问题\" class=\"headerlink\" title=\"gradle版本问题\"></a>gradle版本问题</h3><ol>\n<li><p>gradle包的版本,在项目的gradle/wrapper目录下面有个gradle-wrapper.properties中有如下内容：<br><code>distributionUrl=https\\://services.gradle.org/distributions/gradle-2.2.1-all.zip</code></p>\n<blockquote>\n<p>团队中人员A,B,C，每个人都有自己的电脑和配置，如何能保证A,B,C使用同一个版本得gradle来编译项目呢，gradle wrapper就用来干这个</p>\n</blockquote>\n</li>\n<li><p>gradle插件的版本,是android studio为了方便使用gradle进行配置和编译而开发的插件,项目的根目录下的build.gradle中会配置如下代码:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">repositories &#123;</div><div class=\"line\">    jcenter()</div><div class=\"line\">&#125;</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    classpath &apos;com.android.tools.build:gradle:2.3.0&apos;</div><div class=\"line\"></div><div class=\"line\">    // NOTE: Do not place your application dependencies here; they belong</div><div class=\"line\">    // in the individual module build.gradle files</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>gradle 与 gradlew: W意思是wrapper，它是一个用bash命令包装过的gradle编译启动脚本，里面会进行环境变量检测和设置。最终进行编译的还是gradle;Gradlew是包装器，自动下载包装里定义好的gradle 版本，保证编译环境统一，gradle 是用本地的gradle</p>\n</li>\n<li><p><a href=\"https://developer.android.com/studio/releases/gradle-plugin.html\">gradle插件与包版本对应相关</a>如下：</p>\n<blockquote>\n<p>Plugin version 2.0.0 - 2.1.2 —-&gt; Gradle version 2.10 - 2.13<br>Plugin version 2.1.3 - 2.2.3 —-&gt; Gradle version 2.14.1+<br>Plugin version 2.3.0+ —-&gt; Gradle version 3.3+</p>\n</blockquote>\n</li>\n<li><p>导入其它项目时修改gradle版本问题：</p>\n<blockquote>\n<ol>\n<li><p>修改gradle插件的版本，在项目根目录下的build.gradle中修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; dependencies &#123;</div><div class=\"line\">&gt;    classpath</div><div class=\"line\">&gt; &apos;com.android.tools.build:gradle:2.2.3&apos;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改gradle的版本，在项目的gradle/wrapper目录下面有个gradle-wrapper.properties中修改<br><code>distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip</code></p>\n</li>\n<li>查看当前系统安装了哪些版本的gradle，<code>C:\\Users\\suyf\\.gradle\\wrapper\\dists</code></li>\n</ol>\n</blockquote>\n</li>\n<li><p>手动安装gradle版步骤：</p>\n<blockquote>\n<p>1.下载对应版本的<a href=\"https://services.gradle.org/distributions\">gradle zip</a>包.</p>\n<ol>\n<li>把zip放到相应目录，不需要解压<code>C:\\Users\\suyf\\.gradle\\wrapper\\dists\\gradle-2.14.1-all\\8bnwg5hd3w55iofp58khbp6yv</code></li>\n<li>这个目录最好先让android studio 自己生成好后，取消自己fetch文件，然后自己去下载好gradle-xxx-all-zip文件，放到对应的目录下.</li>\n</ol>\n</blockquote>\n</li>\n<li><p>Eclipse有个打开文件就自动展开目录的功能，在IntelliJ里从Project左边栏的齿轮上选择Autoscroll to Source和Autoscroll from Source都勾选上即可。</p>\n</li>\n</ol>\n"},{"title":"android support library关系详解","date":"2017-04-18T10:41:59.000Z","_content":"\n### 安卓官方为什么要提供支持包？\n1. 向后兼容\n2. 提供不适合打包进framework的功能\n3. 为了支持不同形态的设备\n\n### v4、v7、v13与安卓版本的关系\n版本 | 级别\n--|--\nandroid1.6 |  4\nandroid2.1 |  7\nandroid2.3 |  9\nandorid3.2 | 13\n\n### v4 Support Libraries\n* 官方在Support Library的第24.2.0版本（２０１6年8月发布）的时候移除了对Android 2.2 (API level 8)及其以下版本的支持，但是名字依然是v4。\n\n* Gradle编译脚本中整个v4库的依赖语句如下`compile 'com.android.support:support-v4:24.2.1'`\n* gradle中jar依赖语句格式如 **compile 'jar文件组（group/命名空间）:jar文件名（name）:jar文件版本（version）'**\n\n\n### v7 Support Libraries\n* 需要注意的24.2.0版本以后的v7支持库支持范围也是Android 2.3 (API level 9)及其以上版本了\n* [怎么查看Support Library最新版本](https://developer.android.com/topic/libraries/support-library/revisions.html)？\n* v7 appcompat library：支持UI设计样式、 material design相关，如ActionBar、AppCompatActivity、Theme等。\n\n### ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用:\n```\ndependencies {\n    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha'\n}\n```\n* [怎么查看constraint-layout的最新版本](http://stackoverflow.com/questions/39534070/how-can-i-get-the-latest-version-of-constraintlayout-for-android)？\n\n### Design Support Library:\n    这个库现在使用的也比较多，它提供了material design设计风格的控件。如，navigation drawers、floating action buttons (FAB)、snackbars、tabs等。\n\n### `com.android.support:design:25.3.1`[依赖关系](http://blog.csdn.net/zhangquanit/article/details/54291374)：\n    1. `com.android.support:appcompat-v7:25.3.1`\n        1. `com.android.support:support-v4:25.3.1`\n    2. `com.android.support:support-v4:25.3.1`\n        1. `com.android.support:support-compat:25.3.1`\n        2. `com.android.support:support-media-compat:25.3.1`\n        3. `com.android.support:support-core-utils:25.3.1`\n        4. `com.android.support:support-core-ui:25.3.1`\n        5. `com.android.support:support-fragment:25.3.1`\n    3. `com.android.support:recyclerview-v7:25.3.1`\n    4. `com.android.support:transition:25.3.1`\n","source":"_posts/android support library关系详解.md","raw":"---\ntitle: android support library关系详解\ndate: 2017-04-18 18:41:59\ntags:\n  - android\ncategories: android相关\n---\n\n### 安卓官方为什么要提供支持包？\n1. 向后兼容\n2. 提供不适合打包进framework的功能\n3. 为了支持不同形态的设备\n\n### v4、v7、v13与安卓版本的关系\n版本 | 级别\n--|--\nandroid1.6 |  4\nandroid2.1 |  7\nandroid2.3 |  9\nandorid3.2 | 13\n\n### v4 Support Libraries\n* 官方在Support Library的第24.2.0版本（２０１6年8月发布）的时候移除了对Android 2.2 (API level 8)及其以下版本的支持，但是名字依然是v4。\n\n* Gradle编译脚本中整个v4库的依赖语句如下`compile 'com.android.support:support-v4:24.2.1'`\n* gradle中jar依赖语句格式如 **compile 'jar文件组（group/命名空间）:jar文件名（name）:jar文件版本（version）'**\n\n\n### v7 Support Libraries\n* 需要注意的24.2.0版本以后的v7支持库支持范围也是Android 2.3 (API level 9)及其以上版本了\n* [怎么查看Support Library最新版本](https://developer.android.com/topic/libraries/support-library/revisions.html)？\n* v7 appcompat library：支持UI设计样式、 material design相关，如ActionBar、AppCompatActivity、Theme等。\n\n### ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用:\n```\ndependencies {\n    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha'\n}\n```\n* [怎么查看constraint-layout的最新版本](http://stackoverflow.com/questions/39534070/how-can-i-get-the-latest-version-of-constraintlayout-for-android)？\n\n### Design Support Library:\n    这个库现在使用的也比较多，它提供了material design设计风格的控件。如，navigation drawers、floating action buttons (FAB)、snackbars、tabs等。\n\n### `com.android.support:design:25.3.1`[依赖关系](http://blog.csdn.net/zhangquanit/article/details/54291374)：\n    1. `com.android.support:appcompat-v7:25.3.1`\n        1. `com.android.support:support-v4:25.3.1`\n    2. `com.android.support:support-v4:25.3.1`\n        1. `com.android.support:support-compat:25.3.1`\n        2. `com.android.support:support-media-compat:25.3.1`\n        3. `com.android.support:support-core-utils:25.3.1`\n        4. `com.android.support:support-core-ui:25.3.1`\n        5. `com.android.support:support-fragment:25.3.1`\n    3. `com.android.support:recyclerview-v7:25.3.1`\n    4. `com.android.support:transition:25.3.1`\n","slug":"android support library关系详解","published":1,"updated":"2017-04-19T15:52:35.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q11m0006dkw347volm5k","content":"<h3 id=\"安卓官方为什么要提供支持包？\"><a href=\"#安卓官方为什么要提供支持包？\" class=\"headerlink\" title=\"安卓官方为什么要提供支持包？\"></a>安卓官方为什么要提供支持包？</h3><ol>\n<li>向后兼容</li>\n<li>提供不适合打包进framework的功能</li>\n<li>为了支持不同形态的设备</li>\n</ol>\n<h3 id=\"v4、v7、v13与安卓版本的关系\"><a href=\"#v4、v7、v13与安卓版本的关系\" class=\"headerlink\" title=\"v4、v7、v13与安卓版本的关系\"></a>v4、v7、v13与安卓版本的关系</h3><table>\n<thead>\n<tr>\n<th>版本</th>\n<th>级别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>android1.6</td>\n<td>4</td>\n</tr>\n<tr>\n<td>android2.1</td>\n<td>7</td>\n</tr>\n<tr>\n<td>android2.3</td>\n<td>9</td>\n</tr>\n<tr>\n<td>andorid3.2</td>\n<td>13</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"v4-Support-Libraries\"><a href=\"#v4-Support-Libraries\" class=\"headerlink\" title=\"v4 Support Libraries\"></a>v4 Support Libraries</h3><ul>\n<li><p>官方在Support Library的第24.2.0版本（２０１6年8月发布）的时候移除了对Android 2.2 (API level 8)及其以下版本的支持，但是名字依然是v4。</p>\n</li>\n<li><p>Gradle编译脚本中整个v4库的依赖语句如下<code>compile &#39;com.android.support:support-v4:24.2.1&#39;</code></p>\n</li>\n<li>gradle中jar依赖语句格式如 <strong>compile ‘jar文件组（group/命名空间）:jar文件名（name）:jar文件版本（version）’</strong></li>\n</ul>\n<h3 id=\"v7-Support-Libraries\"><a href=\"#v7-Support-Libraries\" class=\"headerlink\" title=\"v7 Support Libraries\"></a>v7 Support Libraries</h3><ul>\n<li>需要注意的24.2.0版本以后的v7支持库支持范围也是Android 2.3 (API level 9)及其以上版本了</li>\n<li><a href=\"https://developer.android.com/topic/libraries/support-library/revisions.html\" target=\"_blank\" rel=\"external\">怎么查看Support Library最新版本</a>？</li>\n<li>v7 appcompat library：支持UI设计样式、 material design相关，如ActionBar、AppCompatActivity、Theme等。</li>\n</ul>\n<h3 id=\"ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用\"><a href=\"#ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用\" class=\"headerlink\" title=\"ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用:\"></a>ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.android.support.constraint:constraint-layout:1.0.0-alpha&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/39534070/how-can-i-get-the-latest-version-of-constraintlayout-for-android\" target=\"_blank\" rel=\"external\">怎么查看constraint-layout的最新版本</a>？</li>\n</ul>\n<h3 id=\"Design-Support-Library\"><a href=\"#Design-Support-Library\" class=\"headerlink\" title=\"Design Support Library:\"></a>Design Support Library:</h3><pre><code>这个库现在使用的也比较多，它提供了material design设计风格的控件。如，navigation drawers、floating action buttons (FAB)、snackbars、tabs等。\n</code></pre><h3 id=\"com-android-support-design-25-3-1依赖关系：\"><a href=\"#com-android-support-design-25-3-1依赖关系：\" class=\"headerlink\" title=\"com.android.support:design:25.3.1依赖关系：\"></a><code>com.android.support:design:25.3.1</code><a href=\"http://blog.csdn.net/zhangquanit/article/details/54291374\" target=\"_blank\" rel=\"external\">依赖关系</a>：</h3><pre><code>1. `com.android.support:appcompat-v7:25.3.1`\n    1. `com.android.support:support-v4:25.3.1`\n2. `com.android.support:support-v4:25.3.1`\n    1. `com.android.support:support-compat:25.3.1`\n    2. `com.android.support:support-media-compat:25.3.1`\n    3. `com.android.support:support-core-utils:25.3.1`\n    4. `com.android.support:support-core-ui:25.3.1`\n    5. `com.android.support:support-fragment:25.3.1`\n3. `com.android.support:recyclerview-v7:25.3.1`\n4. `com.android.support:transition:25.3.1`\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安卓官方为什么要提供支持包？\"><a href=\"#安卓官方为什么要提供支持包？\" class=\"headerlink\" title=\"安卓官方为什么要提供支持包？\"></a>安卓官方为什么要提供支持包？</h3><ol>\n<li>向后兼容</li>\n<li>提供不适合打包进framework的功能</li>\n<li>为了支持不同形态的设备</li>\n</ol>\n<h3 id=\"v4、v7、v13与安卓版本的关系\"><a href=\"#v4、v7、v13与安卓版本的关系\" class=\"headerlink\" title=\"v4、v7、v13与安卓版本的关系\"></a>v4、v7、v13与安卓版本的关系</h3><table>\n<thead>\n<tr>\n<th>版本</th>\n<th>级别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>android1.6</td>\n<td>4</td>\n</tr>\n<tr>\n<td>android2.1</td>\n<td>7</td>\n</tr>\n<tr>\n<td>android2.3</td>\n<td>9</td>\n</tr>\n<tr>\n<td>andorid3.2</td>\n<td>13</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"v4-Support-Libraries\"><a href=\"#v4-Support-Libraries\" class=\"headerlink\" title=\"v4 Support Libraries\"></a>v4 Support Libraries</h3><ul>\n<li><p>官方在Support Library的第24.2.0版本（２０１6年8月发布）的时候移除了对Android 2.2 (API level 8)及其以下版本的支持，但是名字依然是v4。</p>\n</li>\n<li><p>Gradle编译脚本中整个v4库的依赖语句如下<code>compile &#39;com.android.support:support-v4:24.2.1&#39;</code></p>\n</li>\n<li>gradle中jar依赖语句格式如 <strong>compile ‘jar文件组（group/命名空间）:jar文件名（name）:jar文件版本（version）’</strong></li>\n</ul>\n<h3 id=\"v7-Support-Libraries\"><a href=\"#v7-Support-Libraries\" class=\"headerlink\" title=\"v7 Support Libraries\"></a>v7 Support Libraries</h3><ul>\n<li>需要注意的24.2.0版本以后的v7支持库支持范围也是Android 2.3 (API level 9)及其以上版本了</li>\n<li><a href=\"https://developer.android.com/topic/libraries/support-library/revisions.html\">怎么查看Support Library最新版本</a>？</li>\n<li>v7 appcompat library：支持UI设计样式、 material design相关，如ActionBar、AppCompatActivity、Theme等。</li>\n</ul>\n<h3 id=\"ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用\"><a href=\"#ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用\" class=\"headerlink\" title=\"ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用:\"></a>ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.android.support.constraint:constraint-layout:1.0.0-alpha&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/39534070/how-can-i-get-the-latest-version-of-constraintlayout-for-android\">怎么查看constraint-layout的最新版本</a>？</li>\n</ul>\n<h3 id=\"Design-Support-Library\"><a href=\"#Design-Support-Library\" class=\"headerlink\" title=\"Design Support Library:\"></a>Design Support Library:</h3><pre><code>这个库现在使用的也比较多，它提供了material design设计风格的控件。如，navigation drawers、floating action buttons (FAB)、snackbars、tabs等。\n</code></pre><h3 id=\"com-android-support-design-25-3-1依赖关系：\"><a href=\"#com-android-support-design-25-3-1依赖关系：\" class=\"headerlink\" title=\"com.android.support:design:25.3.1依赖关系：\"></a><code>com.android.support:design:25.3.1</code><a href=\"http://blog.csdn.net/zhangquanit/article/details/54291374\">依赖关系</a>：</h3><pre><code>1. `com.android.support:appcompat-v7:25.3.1`\n    1. `com.android.support:support-v4:25.3.1`\n2. `com.android.support:support-v4:25.3.1`\n    1. `com.android.support:support-compat:25.3.1`\n    2. `com.android.support:support-media-compat:25.3.1`\n    3. `com.android.support:support-core-utils:25.3.1`\n    4. `com.android.support:support-core-ui:25.3.1`\n    5. `com.android.support:support-fragment:25.3.1`\n3. `com.android.support:recyclerview-v7:25.3.1`\n4. `com.android.support:transition:25.3.1`\n</code></pre>"},{"title":"atom使用记录","date":"2017-04-13T11:23:21.000Z","_content":"\n### 常用操作\n1. 打开设置 setting pane：`ctrl+,`\n2. 关闭侧边栏:`ctrl+\\`\n\n---\n\n### 常用快捷键\n1. `Ctrl ＋ Shift + P` 命令面板是Atom中最常用的功能之一\n2. `Ctrl + N`新建文件\n3. `Ctrl + O`打开文件\n4. `Ctrl + Shift + O`打开文件夹\n5. `Ctrl + W`关闭当前编辑文档\n6. `Ctrl + Shift + L`语法选择\n7. `F11`全屏\n8. `Ctrl + Shift+ \"+\" `增大字体\n9. `Ctrl + \\`展示隐藏目录树\n10. `Ctrl + F`在当前文件查找\n11. `Ctrl + Shift + F`在当前目录查找\n12. `Ctrl + ]`增加缩进\n13. `Ctrl + Tab`切换编辑的标签页\n14. `Ctrl + Alt + T`打开toolbar\n\n---\n### markdown 插件快捷键\n```\n\"shift-ctrl-K\": \"markdown-writer:insert-link\"\n\"shift-ctrl-I\": \"markdown-writer:insert-image\"\n\"ctrl-i\":       \"markdown-writer:toggle-italic-text\"\n\"ctrl-b\":       \"markdown-writer:toggle-bold-text\"\n\"ctrl-'\":       \"markdown-writer:toggle-code-text\"\n'ctrl-`':       \"markdown-writer:toggle-codeblock-text\"\n\"ctrl-h\":       \"markdown-writer:toggle-strikethrough-text\"\n\"ctrl-1\":       \"markdown-writer:toggle-h1\"\n\"ctrl-2\":       \"markdown-writer:toggle-h2\"\n\"ctrl-3\":       \"markdown-writer:toggle-h3\"\n\"ctrl-4\":       \"markdown-writer:toggle-h4\"\n\"ctrl-5\":       \"markdown-writer:toggle-h5\"\n```\n---\n### 备份插件\n > personal access token：4521e8dda8479bbbb893d8b467c07d4ec80a2e9c\n > gist id：7336b27f5767197b72fb3745c031b25f\n```\nsync-settings:backup – 这条命令是备份当前的配置\nsync-settings:restore – 这条命令是恢复配置,是直接覆盖的\nsync-settings:view-backup – 这条是当你执行备份后到线上查询你的备份的,也就是到你的gist code里面\nsync-settings:check-backup – 这条是查询最后一次是否正常\n```\n","source":"_posts/atom使用记录.md","raw":"---\ntitle: atom使用记录\ndate: 2017-04-13 19:23:21\ntags:\n  - atom\ncategories: atom相关\n---\n\n### 常用操作\n1. 打开设置 setting pane：`ctrl+,`\n2. 关闭侧边栏:`ctrl+\\`\n\n---\n\n### 常用快捷键\n1. `Ctrl ＋ Shift + P` 命令面板是Atom中最常用的功能之一\n2. `Ctrl + N`新建文件\n3. `Ctrl + O`打开文件\n4. `Ctrl + Shift + O`打开文件夹\n5. `Ctrl + W`关闭当前编辑文档\n6. `Ctrl + Shift + L`语法选择\n7. `F11`全屏\n8. `Ctrl + Shift+ \"+\" `增大字体\n9. `Ctrl + \\`展示隐藏目录树\n10. `Ctrl + F`在当前文件查找\n11. `Ctrl + Shift + F`在当前目录查找\n12. `Ctrl + ]`增加缩进\n13. `Ctrl + Tab`切换编辑的标签页\n14. `Ctrl + Alt + T`打开toolbar\n\n---\n### markdown 插件快捷键\n```\n\"shift-ctrl-K\": \"markdown-writer:insert-link\"\n\"shift-ctrl-I\": \"markdown-writer:insert-image\"\n\"ctrl-i\":       \"markdown-writer:toggle-italic-text\"\n\"ctrl-b\":       \"markdown-writer:toggle-bold-text\"\n\"ctrl-'\":       \"markdown-writer:toggle-code-text\"\n'ctrl-`':       \"markdown-writer:toggle-codeblock-text\"\n\"ctrl-h\":       \"markdown-writer:toggle-strikethrough-text\"\n\"ctrl-1\":       \"markdown-writer:toggle-h1\"\n\"ctrl-2\":       \"markdown-writer:toggle-h2\"\n\"ctrl-3\":       \"markdown-writer:toggle-h3\"\n\"ctrl-4\":       \"markdown-writer:toggle-h4\"\n\"ctrl-5\":       \"markdown-writer:toggle-h5\"\n```\n---\n### 备份插件\n > personal access token：4521e8dda8479bbbb893d8b467c07d4ec80a2e9c\n > gist id：7336b27f5767197b72fb3745c031b25f\n```\nsync-settings:backup – 这条命令是备份当前的配置\nsync-settings:restore – 这条命令是恢复配置,是直接覆盖的\nsync-settings:view-backup – 这条是当你执行备份后到线上查询你的备份的,也就是到你的gist code里面\nsync-settings:check-backup – 这条是查询最后一次是否正常\n```\n","slug":"atom使用记录","published":1,"updated":"2017-04-19T12:41:49.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q11p0007dkw3nsi78go3","content":"<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><ol>\n<li>打开设置 setting pane：<code>ctrl+,</code></li>\n<li>关闭侧边栏:<code>ctrl+\\</code></li>\n</ol>\n<hr>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><ol>\n<li><code>Ctrl ＋ Shift + P</code> 命令面板是Atom中最常用的功能之一</li>\n<li><code>Ctrl + N</code>新建文件</li>\n<li><code>Ctrl + O</code>打开文件</li>\n<li><code>Ctrl + Shift + O</code>打开文件夹</li>\n<li><code>Ctrl + W</code>关闭当前编辑文档</li>\n<li><code>Ctrl + Shift + L</code>语法选择</li>\n<li><code>F11</code>全屏</li>\n<li><code>Ctrl + Shift+ &quot;+&quot;</code>增大字体</li>\n<li><code>Ctrl + \\</code>展示隐藏目录树</li>\n<li><code>Ctrl + F</code>在当前文件查找</li>\n<li><code>Ctrl + Shift + F</code>在当前目录查找</li>\n<li><code>Ctrl + ]</code>增加缩进</li>\n<li><code>Ctrl + Tab</code>切换编辑的标签页</li>\n<li><code>Ctrl + Alt + T</code>打开toolbar</li>\n</ol>\n<hr>\n<h3 id=\"markdown-插件快捷键\"><a href=\"#markdown-插件快捷键\" class=\"headerlink\" title=\"markdown 插件快捷键\"></a>markdown 插件快捷键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;shift-ctrl-K&quot;: &quot;markdown-writer:insert-link&quot;</div><div class=\"line\">&quot;shift-ctrl-I&quot;: &quot;markdown-writer:insert-image&quot;</div><div class=\"line\">&quot;ctrl-i&quot;:       &quot;markdown-writer:toggle-italic-text&quot;</div><div class=\"line\">&quot;ctrl-b&quot;:       &quot;markdown-writer:toggle-bold-text&quot;</div><div class=\"line\">&quot;ctrl-&apos;&quot;:       &quot;markdown-writer:toggle-code-text&quot;</div><div class=\"line\">&apos;ctrl-`&apos;:       &quot;markdown-writer:toggle-codeblock-text&quot;</div><div class=\"line\">&quot;ctrl-h&quot;:       &quot;markdown-writer:toggle-strikethrough-text&quot;</div><div class=\"line\">&quot;ctrl-1&quot;:       &quot;markdown-writer:toggle-h1&quot;</div><div class=\"line\">&quot;ctrl-2&quot;:       &quot;markdown-writer:toggle-h2&quot;</div><div class=\"line\">&quot;ctrl-3&quot;:       &quot;markdown-writer:toggle-h3&quot;</div><div class=\"line\">&quot;ctrl-4&quot;:       &quot;markdown-writer:toggle-h4&quot;</div><div class=\"line\">&quot;ctrl-5&quot;:       &quot;markdown-writer:toggle-h5&quot;</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"备份插件\"><a href=\"#备份插件\" class=\"headerlink\" title=\"备份插件\"></a>备份插件</h3><blockquote>\n<p>personal access token：4521e8dda8479bbbb893d8b467c07d4ec80a2e9c<br>gist id：7336b27f5767197b72fb3745c031b25f<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sync-settings:backup – 这条命令是备份当前的配置</div><div class=\"line\">sync-settings:restore – 这条命令是恢复配置,是直接覆盖的</div><div class=\"line\">sync-settings:view-backup – 这条是当你执行备份后到线上查询你的备份的,也就是到你的gist code里面</div><div class=\"line\">sync-settings:check-backup – 这条是查询最后一次是否正常</div></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><ol>\n<li>打开设置 setting pane：<code>ctrl+,</code></li>\n<li>关闭侧边栏:<code>ctrl+\\</code></li>\n</ol>\n<hr>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><ol>\n<li><code>Ctrl ＋ Shift + P</code> 命令面板是Atom中最常用的功能之一</li>\n<li><code>Ctrl + N</code>新建文件</li>\n<li><code>Ctrl + O</code>打开文件</li>\n<li><code>Ctrl + Shift + O</code>打开文件夹</li>\n<li><code>Ctrl + W</code>关闭当前编辑文档</li>\n<li><code>Ctrl + Shift + L</code>语法选择</li>\n<li><code>F11</code>全屏</li>\n<li><code>Ctrl + Shift+ &quot;+&quot;</code>增大字体</li>\n<li><code>Ctrl + \\</code>展示隐藏目录树</li>\n<li><code>Ctrl + F</code>在当前文件查找</li>\n<li><code>Ctrl + Shift + F</code>在当前目录查找</li>\n<li><code>Ctrl + ]</code>增加缩进</li>\n<li><code>Ctrl + Tab</code>切换编辑的标签页</li>\n<li><code>Ctrl + Alt + T</code>打开toolbar</li>\n</ol>\n<hr>\n<h3 id=\"markdown-插件快捷键\"><a href=\"#markdown-插件快捷键\" class=\"headerlink\" title=\"markdown 插件快捷键\"></a>markdown 插件快捷键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;shift-ctrl-K&quot;: &quot;markdown-writer:insert-link&quot;</div><div class=\"line\">&quot;shift-ctrl-I&quot;: &quot;markdown-writer:insert-image&quot;</div><div class=\"line\">&quot;ctrl-i&quot;:       &quot;markdown-writer:toggle-italic-text&quot;</div><div class=\"line\">&quot;ctrl-b&quot;:       &quot;markdown-writer:toggle-bold-text&quot;</div><div class=\"line\">&quot;ctrl-&apos;&quot;:       &quot;markdown-writer:toggle-code-text&quot;</div><div class=\"line\">&apos;ctrl-`&apos;:       &quot;markdown-writer:toggle-codeblock-text&quot;</div><div class=\"line\">&quot;ctrl-h&quot;:       &quot;markdown-writer:toggle-strikethrough-text&quot;</div><div class=\"line\">&quot;ctrl-1&quot;:       &quot;markdown-writer:toggle-h1&quot;</div><div class=\"line\">&quot;ctrl-2&quot;:       &quot;markdown-writer:toggle-h2&quot;</div><div class=\"line\">&quot;ctrl-3&quot;:       &quot;markdown-writer:toggle-h3&quot;</div><div class=\"line\">&quot;ctrl-4&quot;:       &quot;markdown-writer:toggle-h4&quot;</div><div class=\"line\">&quot;ctrl-5&quot;:       &quot;markdown-writer:toggle-h5&quot;</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"备份插件\"><a href=\"#备份插件\" class=\"headerlink\" title=\"备份插件\"></a>备份插件</h3><blockquote>\n<p>personal access token：4521e8dda8479bbbb893d8b467c07d4ec80a2e9c<br>gist id：7336b27f5767197b72fb3745c031b25f<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sync-settings:backup – 这条命令是备份当前的配置</div><div class=\"line\">sync-settings:restore – 这条命令是恢复配置,是直接覆盖的</div><div class=\"line\">sync-settings:view-backup – 这条是当你执行备份后到线上查询你的备份的,也就是到你的gist code里面</div><div class=\"line\">sync-settings:check-backup – 这条是查询最后一次是否正常</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"css笔记","date":"2017-04-12T12:23:21.000Z","_content":"\n1. CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明：\n> `p {color:red;text-align:center;}`\n> CSS声明总是以分号(;)结束，声明组以大括号({})括起来:\n\n2. HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 \"#\" 来定义。\nclass 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点\".\"号显示：\n\n2. CSS注释以 \"/*\" 开始, 以 \"*/\" 结束。\n\n3. 插入样式表的方法有三种:\n    1. 外部样式表：\n    ```\n    <head>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">\n    </head>\n    ```\n    2. 内部样式表:\n    ```\n    <head>\n    <style>\n        p {margin-left:20px;}\n    </style>\n    </head>\n    ```\n    3. 内联样式:\n    ```\n    <p style=\"color:sienna;margin-left:20px\">This is a paragraph.</p>\n    ```\n    4. 优先级：\n    **内联样式 > 内部样式 > 外部样式 > 浏览器缺省设置**\n\n\n\n4. 背景简写，背景颜色的简写属性为 \"background\"，属性顺序为：\n    1. background-color\n    1. background-image\n    1. background-repeat\n    1. background-attachment\n    1. background-position\n    2. `body {background:#ffffff url('img_tree.png') no-repeat right top;}`\n5. 边框-简写属性：\n    1. border-width\n    1. border-style (required)\n    1. border-color\n    2. `border:5px solid red;`\n6. 分组选择器，每个选择器用逗号分隔。\n   嵌套选择器，每个选择器用空格分隔。\n\n7. 隐藏元素\n   * display:none，且隐藏的元素不会占用任何空间。\n   * visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。\n\n8. 元素定位position:\n    * **Static 定位**，HTML元素的默认值，即没有定位，元素出现在正常的流中。\n    * **Fixed 定位**，元素的位置相对于浏览器窗口是固定位置。Fixed定位使元素的位置与文档流无关，因此不占据空间。\n    * **Relative 定位**，定位是相对其正常位置。可以移动的相对定位元素的内容和相互重叠的元素，它原本所占的空间不会改变。\n    * **Absolute 定位**， 相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于`<html>`。Absolutely定位使元素的位置与文档流无关，因此不占据空间。\n\n9. 响应式媒体查询\n    1. 在 <head> 链接CSS文件时提供判断语句，选择性加载不同的CSS文件\n    `<link rel=\"stylesheet\" href=\"middle.css\" media=\"screen and (min-width: 400px)\">`\n    2. 在CSS文件中分段书写不同设备的代码\n        ```\n        @media screen and (min-width: 600px) { /* CSS Code */ }\n        @media screen and (max-width: 599px) { /* CSS Code */ }\n        ```\n    3. 媒体介质类型\n        > all – 全部媒体类型\n        > braille – 盲文触摸装置\n        > embossed – 分页盲文打印机 （W3C的无障碍做的真细心……）\n        > handheld – 小屏幕和流量有限的手持设备（注意！安装标准来说移动设备都应该使用这个介质类型，但是实际上安卓根本不理会这个介质，请使用 screen 结合媒体查询语句使用）\n        > print – 提供给打印机的样式，最常用的介质类型，打印页面时获得适合阅读的效果\n        > projection – 投影，给投影机使用（有人用？）\n        > screen – 彩色屏幕，最常用的介质类型，一般和屏幕大小表达式联合使用\n        > speech – 语音朗诵，用于屏幕阅读软件（和将来的Siri？）\n        > tty – 固定间距字符网格，例如功能机那样的\n        > tv – 智能电视设备（唔不知道我家的创维酷开支持如何……）\n","source":"_posts/css笔记.md","raw":"---\ntitle: css笔记\ndate: 2017-04-12 20:23:21\ntags:\n  - css\ncategories: css相关\n---\n\n1. CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明：\n> `p {color:red;text-align:center;}`\n> CSS声明总是以分号(;)结束，声明组以大括号({})括起来:\n\n2. HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 \"#\" 来定义。\nclass 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点\".\"号显示：\n\n2. CSS注释以 \"/*\" 开始, 以 \"*/\" 结束。\n\n3. 插入样式表的方法有三种:\n    1. 外部样式表：\n    ```\n    <head>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">\n    </head>\n    ```\n    2. 内部样式表:\n    ```\n    <head>\n    <style>\n        p {margin-left:20px;}\n    </style>\n    </head>\n    ```\n    3. 内联样式:\n    ```\n    <p style=\"color:sienna;margin-left:20px\">This is a paragraph.</p>\n    ```\n    4. 优先级：\n    **内联样式 > 内部样式 > 外部样式 > 浏览器缺省设置**\n\n\n\n4. 背景简写，背景颜色的简写属性为 \"background\"，属性顺序为：\n    1. background-color\n    1. background-image\n    1. background-repeat\n    1. background-attachment\n    1. background-position\n    2. `body {background:#ffffff url('img_tree.png') no-repeat right top;}`\n5. 边框-简写属性：\n    1. border-width\n    1. border-style (required)\n    1. border-color\n    2. `border:5px solid red;`\n6. 分组选择器，每个选择器用逗号分隔。\n   嵌套选择器，每个选择器用空格分隔。\n\n7. 隐藏元素\n   * display:none，且隐藏的元素不会占用任何空间。\n   * visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。\n\n8. 元素定位position:\n    * **Static 定位**，HTML元素的默认值，即没有定位，元素出现在正常的流中。\n    * **Fixed 定位**，元素的位置相对于浏览器窗口是固定位置。Fixed定位使元素的位置与文档流无关，因此不占据空间。\n    * **Relative 定位**，定位是相对其正常位置。可以移动的相对定位元素的内容和相互重叠的元素，它原本所占的空间不会改变。\n    * **Absolute 定位**， 相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于`<html>`。Absolutely定位使元素的位置与文档流无关，因此不占据空间。\n\n9. 响应式媒体查询\n    1. 在 <head> 链接CSS文件时提供判断语句，选择性加载不同的CSS文件\n    `<link rel=\"stylesheet\" href=\"middle.css\" media=\"screen and (min-width: 400px)\">`\n    2. 在CSS文件中分段书写不同设备的代码\n        ```\n        @media screen and (min-width: 600px) { /* CSS Code */ }\n        @media screen and (max-width: 599px) { /* CSS Code */ }\n        ```\n    3. 媒体介质类型\n        > all – 全部媒体类型\n        > braille – 盲文触摸装置\n        > embossed – 分页盲文打印机 （W3C的无障碍做的真细心……）\n        > handheld – 小屏幕和流量有限的手持设备（注意！安装标准来说移动设备都应该使用这个介质类型，但是实际上安卓根本不理会这个介质，请使用 screen 结合媒体查询语句使用）\n        > print – 提供给打印机的样式，最常用的介质类型，打印页面时获得适合阅读的效果\n        > projection – 投影，给投影机使用（有人用？）\n        > screen – 彩色屏幕，最常用的介质类型，一般和屏幕大小表达式联合使用\n        > speech – 语音朗诵，用于屏幕阅读软件（和将来的Siri？）\n        > tty – 固定间距字符网格，例如功能机那样的\n        > tv – 智能电视设备（唔不知道我家的创维酷开支持如何……）\n","slug":"css笔记","published":1,"updated":"2017-04-19T12:41:49.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q11r0008dkw3mfgnfnhg","content":"<ol>\n<li><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明：</p>\n<blockquote>\n<p><code>p {color:red;text-align:center;}</code><br>CSS声明总是以分号(;)结束，声明组以大括号({})括起来:</p>\n</blockquote>\n</li>\n<li><p>HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。<br>class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点”.”号显示：</p>\n</li>\n<li><p>CSS注释以 “/<em>“ 开始, 以 “</em>/“ 结束。</p>\n</li>\n<li><p>插入样式表的方法有三种:</p>\n<ol>\n<li><p>外部样式表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;</div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>内部样式表:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    p &#123;margin-left:20px;&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>内联样式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;This is a paragraph.&lt;/p&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>优先级：<br><strong>内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器缺省设置</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>背景简写，背景颜色的简写属性为 “background”，属性顺序为：<ol>\n<li>background-color</li>\n<li>background-image</li>\n<li>background-repeat</li>\n<li>background-attachment</li>\n<li>background-position</li>\n<li><code>body {background:#ffffff url(&#39;img_tree.png&#39;) no-repeat right top;}</code></li>\n</ol>\n</li>\n<li>边框-简写属性：<ol>\n<li>border-width</li>\n<li>border-style (required)</li>\n<li>border-color</li>\n<li><code>border:5px solid red;</code></li>\n</ol>\n</li>\n<li><p>分组选择器，每个选择器用逗号分隔。<br>嵌套选择器，每个选择器用空格分隔。</p>\n</li>\n<li><p>隐藏元素</p>\n<ul>\n<li>display:none，且隐藏的元素不会占用任何空间。</li>\n<li>visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。</li>\n</ul>\n</li>\n<li><p>元素定位position:</p>\n<ul>\n<li><strong>Static 定位</strong>，HTML元素的默认值，即没有定位，元素出现在正常的流中。</li>\n<li><strong>Fixed 定位</strong>，元素的位置相对于浏览器窗口是固定位置。Fixed定位使元素的位置与文档流无关，因此不占据空间。</li>\n<li><strong>Relative 定位</strong>，定位是相对其正常位置。可以移动的相对定位元素的内容和相互重叠的元素，它原本所占的空间不会改变。</li>\n<li><strong>Absolute 定位</strong>， 相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<code>&lt;html&gt;</code>。Absolutely定位使元素的位置与文档流无关，因此不占据空间。</li>\n</ul>\n</li>\n<li><p>响应式媒体查询</p>\n<ol>\n<li>在 <head> 链接CSS文件时提供判断语句，选择性加载不同的CSS文件<br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;middle.css&quot; media=&quot;screen and (min-width: 400px)&quot;&gt;</code></head></li>\n<li><p>在CSS文件中分段书写不同设备的代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen and (min-width: 600px) &#123; /* CSS Code */ &#125;</div><div class=\"line\">@media screen and (max-width: 599px) &#123; /* CSS Code */ &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>媒体介质类型</p>\n<blockquote>\n<p>all – 全部媒体类型<br>braille – 盲文触摸装置<br>embossed – 分页盲文打印机 （W3C的无障碍做的真细心……）<br>handheld – 小屏幕和流量有限的手持设备（注意！安装标准来说移动设备都应该使用这个介质类型，但是实际上安卓根本不理会这个介质，请使用 screen 结合媒体查询语句使用）<br>print – 提供给打印机的样式，最常用的介质类型，打印页面时获得适合阅读的效果<br>projection – 投影，给投影机使用（有人用？）<br>screen – 彩色屏幕，最常用的介质类型，一般和屏幕大小表达式联合使用<br>speech – 语音朗诵，用于屏幕阅读软件（和将来的Siri？）<br>tty – 固定间距字符网格，例如功能机那样的<br>tv – 智能电视设备（唔不知道我家的创维酷开支持如何……）</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明：</p>\n<blockquote>\n<p><code>p {color:red;text-align:center;}</code><br>CSS声明总是以分号(;)结束，声明组以大括号({})括起来:</p>\n</blockquote>\n</li>\n<li><p>HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。<br>class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点”.”号显示：</p>\n</li>\n<li><p>CSS注释以 “/<em>“ 开始, 以 “</em>/“ 结束。</p>\n</li>\n<li><p>插入样式表的方法有三种:</p>\n<ol>\n<li><p>外部样式表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;</div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>内部样式表:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    p &#123;margin-left:20px;&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>内联样式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;This is a paragraph.&lt;/p&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>优先级：<br><strong>内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器缺省设置</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>背景简写，背景颜色的简写属性为 “background”，属性顺序为：<ol>\n<li>background-color</li>\n<li>background-image</li>\n<li>background-repeat</li>\n<li>background-attachment</li>\n<li>background-position</li>\n<li><code>body {background:#ffffff url(&#39;img_tree.png&#39;) no-repeat right top;}</code></li>\n</ol>\n</li>\n<li>边框-简写属性：<ol>\n<li>border-width</li>\n<li>border-style (required)</li>\n<li>border-color</li>\n<li><code>border:5px solid red;</code></li>\n</ol>\n</li>\n<li><p>分组选择器，每个选择器用逗号分隔。<br>嵌套选择器，每个选择器用空格分隔。</p>\n</li>\n<li><p>隐藏元素</p>\n<ul>\n<li>display:none，且隐藏的元素不会占用任何空间。</li>\n<li>visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。</li>\n</ul>\n</li>\n<li><p>元素定位position:</p>\n<ul>\n<li><strong>Static 定位</strong>，HTML元素的默认值，即没有定位，元素出现在正常的流中。</li>\n<li><strong>Fixed 定位</strong>，元素的位置相对于浏览器窗口是固定位置。Fixed定位使元素的位置与文档流无关，因此不占据空间。</li>\n<li><strong>Relative 定位</strong>，定位是相对其正常位置。可以移动的相对定位元素的内容和相互重叠的元素，它原本所占的空间不会改变。</li>\n<li><strong>Absolute 定位</strong>， 相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<code>&lt;html&gt;</code>。Absolutely定位使元素的位置与文档流无关，因此不占据空间。</li>\n</ul>\n</li>\n<li><p>响应式媒体查询</p>\n<ol>\n<li>在 <head> 链接CSS文件时提供判断语句，选择性加载不同的CSS文件<br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;middle.css&quot; media=&quot;screen and (min-width: 400px)&quot;&gt;</code></li>\n<li><p>在CSS文件中分段书写不同设备的代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen and (min-width: 600px) &#123; /* CSS Code */ &#125;</div><div class=\"line\">@media screen and (max-width: 599px) &#123; /* CSS Code */ &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>媒体介质类型</p>\n<blockquote>\n<p>all – 全部媒体类型<br>braille – 盲文触摸装置<br>embossed – 分页盲文打印机 （W3C的无障碍做的真细心……）<br>handheld – 小屏幕和流量有限的手持设备（注意！安装标准来说移动设备都应该使用这个介质类型，但是实际上安卓根本不理会这个介质，请使用 screen 结合媒体查询语句使用）<br>print – 提供给打印机的样式，最常用的介质类型，打印页面时获得适合阅读的效果<br>projection – 投影，给投影机使用（有人用？）<br>screen – 彩色屏幕，最常用的介质类型，一般和屏幕大小表达式联合使用<br>speech – 语音朗诵，用于屏幕阅读软件（和将来的Siri？）<br>tty – 固定间距字符网格，例如功能机那样的<br>tv – 智能电视设备（唔不知道我家的创维酷开支持如何……）</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"github page hexo博客同步源文件与静态文件方法","date":"2017-04-17T15:03:30.000Z","_content":"### 搭建流程\n1. 在github上创建仓库 uriboyka.github.io.\n2. 创建两个分支：master 与 hexo.\n3. 设置 hexo 为默认分支，保存源文件.\n4. git clone hexo 分支到本地，执行：\n  ```\n  hexo init\n  npm install\n  npm install hexo-deployer-git --save\n  ```\n5. 修改站点目录 _config 中的 deploy 参数，分支为：master\n6. 依次执行下列命令，提交修改的源文件：\n  ```\n  git add .\n  git commit -m \"\"\n  git push origin hexo\n  ```\n7. 发布网站到 master 分支上：`hexo g -d`\n\n### 日常改动流程\n1. 将源文件改动推送到github上：\n  ```\n  git add .\n  git commit -m \"\"\n  git push origin hexo\n  ```\n2. 将html文件发布到master分支：\n  ```\n  hexo g -d\n  ```\n","source":"_posts/github page hexo博客同步源文件与静态文件方法.md","raw":"---\ntitle: github page hexo博客同步源文件与静态文件方法\ndate: 2017-04-17 23:03:30\ntags:\n  - hexo\ncategories: GitHub Pages 博客相关\n---\n### 搭建流程\n1. 在github上创建仓库 uriboyka.github.io.\n2. 创建两个分支：master 与 hexo.\n3. 设置 hexo 为默认分支，保存源文件.\n4. git clone hexo 分支到本地，执行：\n  ```\n  hexo init\n  npm install\n  npm install hexo-deployer-git --save\n  ```\n5. 修改站点目录 _config 中的 deploy 参数，分支为：master\n6. 依次执行下列命令，提交修改的源文件：\n  ```\n  git add .\n  git commit -m \"\"\n  git push origin hexo\n  ```\n7. 发布网站到 master 分支上：`hexo g -d`\n\n### 日常改动流程\n1. 将源文件改动推送到github上：\n  ```\n  git add .\n  git commit -m \"\"\n  git push origin hexo\n  ```\n2. 将html文件发布到master分支：\n  ```\n  hexo g -d\n  ```\n","slug":"github page hexo博客同步源文件与静态文件方法","published":1,"updated":"2017-04-17T16:07:39.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q11x000cdkw34ns7dezj","content":"<h3 id=\"搭建流程\"><a href=\"#搭建流程\" class=\"headerlink\" title=\"搭建流程\"></a>搭建流程</h3><ol>\n<li>在github上创建仓库 uriboyka.github.io.</li>\n<li>创建两个分支：master 与 hexo.</li>\n<li>设置 hexo 为默认分支，保存源文件.</li>\n<li><p>git clone hexo 分支到本地，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div><div class=\"line\">npm install</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改站点目录 _config 中的 deploy 参数，分支为：master</p>\n</li>\n<li><p>依次执行下列命令，提交修改的源文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>发布网站到 master 分支上：<code>hexo g -d</code></p>\n</li>\n</ol>\n<h3 id=\"日常改动流程\"><a href=\"#日常改动流程\" class=\"headerlink\" title=\"日常改动流程\"></a>日常改动流程</h3><ol>\n<li><p>将源文件改动推送到github上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>将html文件发布到master分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g -d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"搭建流程\"><a href=\"#搭建流程\" class=\"headerlink\" title=\"搭建流程\"></a>搭建流程</h3><ol>\n<li>在github上创建仓库 uriboyka.github.io.</li>\n<li>创建两个分支：master 与 hexo.</li>\n<li>设置 hexo 为默认分支，保存源文件.</li>\n<li><p>git clone hexo 分支到本地，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div><div class=\"line\">npm install</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改站点目录 _config 中的 deploy 参数，分支为：master</p>\n</li>\n<li><p>依次执行下列命令，提交修改的源文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>发布网站到 master 分支上：<code>hexo g -d</code></p>\n</li>\n</ol>\n<h3 id=\"日常改动流程\"><a href=\"#日常改动流程\" class=\"headerlink\" title=\"日常改动流程\"></a>日常改动流程</h3><ol>\n<li><p>将源文件改动推送到github上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>将html文件发布到master分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g -d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"git笔记","date":"2017-04-12T13:13:21.000Z","_content":"\n1. 安装完成后，还需要最后一步设置，在命令行输入：\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置.\n\n2. 创建仓库，通过git init命令把这个目录变成Git可以管理的仓库。\n```\n$ git init\nInitialized empty Git repository in /Users/michael/learngit/.git/\n```\n\n3. 添加文件到Git仓库，分两步：\n> 第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；\n> 第二步，使用命令git commit，完成。\n\n4. 要随时掌握工作区的状态，使用git status命令。\n如果git status告诉你有文件被修改过，用git diff可以查看修改内容。\n\n5. 在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\n\n6. 版本回退\n> HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。\n> 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。\n> 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。\n\n7. 工作区和暂存区\n> 前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n> 第一步是用`git add`把文件添加进去，实际上就是把文件修改添加到暂存区；\n> 第二步是用`git commit`提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n> 因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。\n> 你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n8. 管理修改,每次修改，如果不add到暂存区，那就不会加入到commit中。\n\n9. 撤销修改:\n    1. 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n    2. 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。\n    3. 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n10. 删除文件，在文件管理器中把没用的文件删了，然后就用命令`git rm`删掉，并且`git commit`。\n\n11. 添加远程仓库：\n    1. 要关联一个远程库，使用命令`git remote add origin git@github.com:uriboyka/learngit.git`；\n    2. 关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n    3. 此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n\n12. Git分支：\n    * 查看分支：`git branch`\n    * 创建分支：`git branch <name>`\n    * 切换分支：`git checkout <name>`\n    * 创建+切换分支：`git checkout -b <name>`\n    * 合并某分支到当前分支：`git merge <name>`\n    * 删除分支：`git branch -d <name>`\n\n13. 多人协作：\n    * 查看远程库信息，使用git remote -v；\n    * 本地新建的分支如果不推送到远程，对其他人就是不可见的；\n    * 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n    * 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n    * 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n    * 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n","source":"_posts/git笔记.md","raw":"---\ntitle: git笔记\ndate: 2017-04-12 21:13:21\ntags:\n  - git\ncategories: git相关\n---\n\n1. 安装完成后，还需要最后一步设置，在命令行输入：\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置.\n\n2. 创建仓库，通过git init命令把这个目录变成Git可以管理的仓库。\n```\n$ git init\nInitialized empty Git repository in /Users/michael/learngit/.git/\n```\n\n3. 添加文件到Git仓库，分两步：\n> 第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；\n> 第二步，使用命令git commit，完成。\n\n4. 要随时掌握工作区的状态，使用git status命令。\n如果git status告诉你有文件被修改过，用git diff可以查看修改内容。\n\n5. 在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\n\n6. 版本回退\n> HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。\n> 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。\n> 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。\n\n7. 工作区和暂存区\n> 前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n> 第一步是用`git add`把文件添加进去，实际上就是把文件修改添加到暂存区；\n> 第二步是用`git commit`提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n> 因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。\n> 你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n8. 管理修改,每次修改，如果不add到暂存区，那就不会加入到commit中。\n\n9. 撤销修改:\n    1. 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n    2. 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。\n    3. 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n10. 删除文件，在文件管理器中把没用的文件删了，然后就用命令`git rm`删掉，并且`git commit`。\n\n11. 添加远程仓库：\n    1. 要关联一个远程库，使用命令`git remote add origin git@github.com:uriboyka/learngit.git`；\n    2. 关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n    3. 此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n\n12. Git分支：\n    * 查看分支：`git branch`\n    * 创建分支：`git branch <name>`\n    * 切换分支：`git checkout <name>`\n    * 创建+切换分支：`git checkout -b <name>`\n    * 合并某分支到当前分支：`git merge <name>`\n    * 删除分支：`git branch -d <name>`\n\n13. 多人协作：\n    * 查看远程库信息，使用git remote -v；\n    * 本地新建的分支如果不推送到远程，对其他人就是不可见的；\n    * 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n    * 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n    * 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n    * 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n","slug":"git笔记","published":1,"updated":"2017-04-19T13:22:42.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q121000edkw3v4e9qykc","content":"<ol>\n<li>安装完成后，还需要最后一步设置，在命令行输入：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置.</p>\n<ol>\n<li><p>创建仓库，通过git init命令把这个目录变成Git可以管理的仓库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">Initialized empty Git repository in /Users/michael/learngit/.git/</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加文件到Git仓库，分两步：</p>\n<blockquote>\n<p>第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；<br>第二步，使用命令git commit，完成。</file></p>\n</blockquote>\n</li>\n<li><p>要随时掌握工作区的状态，使用git status命令。<br>如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</p>\n</li>\n<li><p>在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p>\n</li>\n<li><p>版本回退</p>\n<blockquote>\n<p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。<br>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p>\n</blockquote>\n</li>\n<li><p>工作区和暂存区</p>\n<blockquote>\n<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：<br>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。<br>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。<br>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n</blockquote>\n</li>\n<li><p>管理修改,每次修改，如果不add到暂存区，那就不会加入到commit中。</p>\n</li>\n<li><p>撤销修改:</p>\n<ol>\n<li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li>\n<li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</li>\n<li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li>\n</ol>\n</li>\n<li><p>删除文件，在文件管理器中把没用的文件删了，然后就用命令<code>git rm</code>删掉，并且<code>git commit</code>。</p>\n</li>\n<li><p>添加远程仓库：</p>\n<ol>\n<li>要关联一个远程库，使用命令<code>git remote add origin git@github.com:uriboyka/learngit.git</code>；</li>\n<li>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</li>\n<li>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</li>\n</ol>\n</li>\n<li><p>Git分支：</p>\n<ul>\n<li>查看分支：<code>git branch</code></li>\n<li>创建分支：<code>git branch &lt;name&gt;</code></li>\n<li>切换分支：<code>git checkout &lt;name&gt;</code></li>\n<li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></li>\n<li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li>\n<li>删除分支：<code>git branch -d &lt;name&gt;</code></li>\n</ul>\n</li>\n<li><p>多人协作：</p>\n<ul>\n<li>查看远程库信息，使用git remote -v；</li>\n<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>\n<li>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</li>\n<li>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</li>\n<li>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</li>\n<li>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>安装完成后，还需要最后一步设置，在命令行输入：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置.</p>\n<ol>\n<li><p>创建仓库，通过git init命令把这个目录变成Git可以管理的仓库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">Initialized empty Git repository in /Users/michael/learngit/.git/</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加文件到Git仓库，分两步：</p>\n<blockquote>\n<p>第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；<br>第二步，使用命令git commit，完成。</p>\n</blockquote>\n</li>\n<li><p>要随时掌握工作区的状态，使用git status命令。<br>如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</p>\n</li>\n<li><p>在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p>\n</li>\n<li><p>版本回退</p>\n<blockquote>\n<p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。<br>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p>\n</blockquote>\n</li>\n<li><p>工作区和暂存区</p>\n<blockquote>\n<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：<br>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。<br>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。<br>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n</blockquote>\n</li>\n<li><p>管理修改,每次修改，如果不add到暂存区，那就不会加入到commit中。</p>\n</li>\n<li><p>撤销修改:</p>\n<ol>\n<li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li>\n<li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</li>\n<li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li>\n</ol>\n</li>\n<li><p>删除文件，在文件管理器中把没用的文件删了，然后就用命令<code>git rm</code>删掉，并且<code>git commit</code>。</p>\n</li>\n<li><p>添加远程仓库：</p>\n<ol>\n<li>要关联一个远程库，使用命令<code>git remote add origin git@github.com:uriboyka/learngit.git</code>；</li>\n<li>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</li>\n<li>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</li>\n</ol>\n</li>\n<li><p>Git分支：</p>\n<ul>\n<li>查看分支：<code>git branch</code></li>\n<li>创建分支：<code>git branch &lt;name&gt;</code></li>\n<li>切换分支：<code>git checkout &lt;name&gt;</code></li>\n<li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></li>\n<li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li>\n<li>删除分支：<code>git branch -d &lt;name&gt;</code></li>\n</ul>\n</li>\n<li><p>多人协作：</p>\n<ul>\n<li>查看远程库信息，使用git remote -v；</li>\n<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>\n<li>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</li>\n<li>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</li>\n<li>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</li>\n<li>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"git遇到的问题","date":"2017-04-19T13:13:21.000Z","_content":"\n1. github push 提交代码时停止在writing objects怎么办？\n  ```\n  git config --global http.postBuffer 524288000\n  git config --global sendpack.sideband false\n  ```\n\n2. git 修改地址？\n  1. 1.修改命令git remote set-url origin [url]\n  ```\n  git remote set-url origin git@github.com:uriboyka/uriboyka.github.io.git\n  ```\n  2. 先删后加\n  ```\n  git remote rm origin\n  git remote add origin [url]\n  ```\n  3. 修改配置文件\n  ```\n  $ vim .git/config\n  ```\n","source":"_posts/git遇到的问题.md","raw":"---\ntitle: git遇到的问题\ndate: 2017-04-19 21:13:21\ntags:\n  - git\ncategories: git相关\n---\n\n1. github push 提交代码时停止在writing objects怎么办？\n  ```\n  git config --global http.postBuffer 524288000\n  git config --global sendpack.sideband false\n  ```\n\n2. git 修改地址？\n  1. 1.修改命令git remote set-url origin [url]\n  ```\n  git remote set-url origin git@github.com:uriboyka/uriboyka.github.io.git\n  ```\n  2. 先删后加\n  ```\n  git remote rm origin\n  git remote add origin [url]\n  ```\n  3. 修改配置文件\n  ```\n  $ vim .git/config\n  ```\n","slug":"git遇到的问题","published":1,"updated":"2017-04-19T13:15:38.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q125000hdkw3e4fh3uip","content":"<ol>\n<li><p>github push 提交代码时停止在writing objects怎么办？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.postBuffer 524288000</div><div class=\"line\">git config --global sendpack.sideband false</div></pre></td></tr></table></figure>\n</li>\n<li><p>git 修改地址？</p>\n<ol>\n<li><p>1.修改命令git remote set-url origin [url]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote set-url origin git@github.com:uriboyka/uriboyka.github.io.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>先删后加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote rm origin</div><div class=\"line\">git remote add origin [url]</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim .git/config</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>github push 提交代码时停止在writing objects怎么办？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.postBuffer 524288000</div><div class=\"line\">git config --global sendpack.sideband false</div></pre></td></tr></table></figure>\n</li>\n<li><p>git 修改地址？</p>\n<ol>\n<li><p>1.修改命令git remote set-url origin [url]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote set-url origin git@github.com:uriboyka/uriboyka.github.io.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>先删后加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote rm origin</div><div class=\"line\">git remote add origin [url]</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim .git/config</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"java编程思想笔记","date":"2017-04-19T14:19:20.000Z","_content":"\n### 一切都是对象\n* 创建了一个引用，就希它能与一个对象相关联。new操作符的意思是：“给我一个对象”。\n* 基本类型存储到**堆栈**。\n* 对象类型存储到**堆**。\n* java基本类型所占存储空间大小是不变的:\n\n基本类型 | 大小 | 包装器类型\n--|---|--\nvoid | - | Void\nboolean | - | Boolean\nbyte | 8 bits | Character\nchar | 16 bits| Character\nshort | 16 bits | Short\nint | 32 bits | Integer\nlong | 64 bits | Long\nfloat | 32bits| Float\ndouble | 64 bits | Double\n","source":"_posts/java编程思想笔记.md","raw":"---\ntitle: java编程思想笔记\ndate: 2017-04-19 22:19:20\ntags:\n  - java\ncategories: java相关\n---\n\n### 一切都是对象\n* 创建了一个引用，就希它能与一个对象相关联。new操作符的意思是：“给我一个对象”。\n* 基本类型存储到**堆栈**。\n* 对象类型存储到**堆**。\n* java基本类型所占存储空间大小是不变的:\n\n基本类型 | 大小 | 包装器类型\n--|---|--\nvoid | - | Void\nboolean | - | Boolean\nbyte | 8 bits | Character\nchar | 16 bits| Character\nshort | 16 bits | Short\nint | 32 bits | Integer\nlong | 64 bits | Long\nfloat | 32bits| Float\ndouble | 64 bits | Double\n","slug":"java编程思想笔记","published":1,"updated":"2017-04-19T15:52:32.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q127000idkw3s1i8dpfj","content":"<h3 id=\"一切都是对象\"><a href=\"#一切都是对象\" class=\"headerlink\" title=\"一切都是对象\"></a>一切都是对象</h3><ul>\n<li>创建了一个引用，就希它能与一个对象相关联。new操作符的意思是：“给我一个对象”。</li>\n<li>基本类型存储到<strong>堆栈</strong>。</li>\n<li>对象类型存储到<strong>堆</strong>。</li>\n<li>java基本类型所占存储空间大小是不变的:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>大小</th>\n<th>包装器类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void</td>\n<td>-</td>\n<td>Void</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>-</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>8 bits</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>char</td>\n<td>16 bits</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>short</td>\n<td>16 bits</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32 bits</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>64 bits</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>32bits</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>64 bits</td>\n<td>Double</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一切都是对象\"><a href=\"#一切都是对象\" class=\"headerlink\" title=\"一切都是对象\"></a>一切都是对象</h3><ul>\n<li>创建了一个引用，就希它能与一个对象相关联。new操作符的意思是：“给我一个对象”。</li>\n<li>基本类型存储到<strong>堆栈</strong>。</li>\n<li>对象类型存储到<strong>堆</strong>。</li>\n<li>java基本类型所占存储空间大小是不变的:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>大小</th>\n<th>包装器类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void</td>\n<td>-</td>\n<td>Void</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>-</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>8 bits</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>char</td>\n<td>16 bits</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>short</td>\n<td>16 bits</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32 bits</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>64 bits</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>32bits</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>64 bits</td>\n<td>Double</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"gradle笔记未完","date":"2017-04-11T13:13:21.000Z","_content":"[Android Studio Jar、so、library项目依赖](https://rocko.xyz/2014/12/13/Android-Studio-jar%E3%80%81so%E3%80%81library%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/)\n\n[gradle实践系列](http://hucaihua.cn/archives/)\n[(Gradle实战)中文版](https://lippiouyang.gitbooks.io/gradle-in-action-cn/content/)\n[Gradle User Guide 中文版](https://dongchuan.gitbooks.io/gradle-user-guide-/)\n[Gradle Android插件用户指南翻译](http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision/)\n[gradle Android DSL参考](http://google.github.io/android-gradle-dsl/2.2/)\n[gradle DSL参考](https://docs.gradle.org/3.4.1/dsl/)\n[看懂Gradle脚本](http://blog.csdn.net/SpiderDog/article/category/2317067)\n","source":"_posts/gradle笔记.md","raw":"---\ntitle: gradle笔记未完\ndate: 2017-04-11 21:13:21\ntags:\n  - gradle\ncategories: gradle相关\n---\n[Android Studio Jar、so、library项目依赖](https://rocko.xyz/2014/12/13/Android-Studio-jar%E3%80%81so%E3%80%81library%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/)\n\n[gradle实践系列](http://hucaihua.cn/archives/)\n[(Gradle实战)中文版](https://lippiouyang.gitbooks.io/gradle-in-action-cn/content/)\n[Gradle User Guide 中文版](https://dongchuan.gitbooks.io/gradle-user-guide-/)\n[Gradle Android插件用户指南翻译](http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision/)\n[gradle Android DSL参考](http://google.github.io/android-gradle-dsl/2.2/)\n[gradle DSL参考](https://docs.gradle.org/3.4.1/dsl/)\n[看懂Gradle脚本](http://blog.csdn.net/SpiderDog/article/category/2317067)\n","slug":"gradle笔记","published":1,"updated":"2017-04-19T12:41:49.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q12b000mdkw3j9ejri0n","content":"<p><a href=\"https://rocko.xyz/2014/12/13/Android-Studio-jar%E3%80%81so%E3%80%81library%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/\" target=\"_blank\" rel=\"external\">Android Studio Jar、so、library项目依赖</a></p>\n<p><a href=\"http://hucaihua.cn/archives/\" target=\"_blank\" rel=\"external\">gradle实践系列</a><br><a href=\"https://lippiouyang.gitbooks.io/gradle-in-action-cn/content/\" target=\"_blank\" rel=\"external\">(Gradle实战)中文版</a><br><a href=\"https://dongchuan.gitbooks.io/gradle-user-guide-/\" target=\"_blank\" rel=\"external\">Gradle User Guide 中文版</a><br><a href=\"http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision/\" target=\"_blank\" rel=\"external\">Gradle Android插件用户指南翻译</a><br><a href=\"http://google.github.io/android-gradle-dsl/2.2/\" target=\"_blank\" rel=\"external\">gradle Android DSL参考</a><br><a href=\"https://docs.gradle.org/3.4.1/dsl/\" target=\"_blank\" rel=\"external\">gradle DSL参考</a><br><a href=\"http://blog.csdn.net/SpiderDog/article/category/2317067\" target=\"_blank\" rel=\"external\">看懂Gradle脚本</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://rocko.xyz/2014/12/13/Android-Studio-jar%E3%80%81so%E3%80%81library%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/\">Android Studio Jar、so、library项目依赖</a></p>\n<p><a href=\"http://hucaihua.cn/archives/\">gradle实践系列</a><br><a href=\"https://lippiouyang.gitbooks.io/gradle-in-action-cn/content/\">(Gradle实战)中文版</a><br><a href=\"https://dongchuan.gitbooks.io/gradle-user-guide-/\">Gradle User Guide 中文版</a><br><a href=\"http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision/\">Gradle Android插件用户指南翻译</a><br><a href=\"http://google.github.io/android-gradle-dsl/2.2/\">gradle Android DSL参考</a><br><a href=\"https://docs.gradle.org/3.4.1/dsl/\">gradle DSL参考</a><br><a href=\"http://blog.csdn.net/SpiderDog/article/category/2317067\">看懂Gradle脚本</a></p>\n"},{"title":"tomcat笔记","date":"2017-04-12T13:23:21.000Z","_content":"\n### tomcat目录\n1. webapps：tomcat默认部署路径。\n2. wtpwebapps： eclipse默认部署路径。\n3. 两者同时存在，运行bin中的startup.bat,运行wtpwebapps中部署的项目。\n\n### conf目录\n1. server.xml：tomcat的主配置文件。\n2. context.xml：所有host的默认配置信息。\n3. web.xml：为所有tomcat内的web应用程序提供默认配置信息。\n4. tomcat-users.xml：tomcat的角色配置文件。\n\n### server.xml配置\n1. 顶层元素<Server>: port--指定一个端口，这个端口负责监听关闭tomcat的请求。\n2. 顶层元素<Service>: name--指定service的名字。\n3. 连接器类元素<Connector>: port--指定服务器要监听的端口，并在这个端口监听来自客户端的请求。\n4. 容器类元素<Context>: 代表运行在虚拟主机上的单个web应用:\n> `<Context path=\"bbs\" docBase=\"bbs\" debug=\"0\" reloadable=\"true\"/>`\n> 1. path:指定访问该Web应用的URL入口.\n> 2. docBase:指定Web应用的文件路径，可以给定绝对路径，也可以给定相对于<Host>的appBase属性的相对路径，如果Web应用采用开放目录结构，则指定Web应用的根目录，如果Web应用是个war文件，则指定war文件的路径。\n>3. reloadable:如果这个属性设为true，tomcat服务器在运行状态下会监视在WEB-INF/classes和WEB-INF/lib目录下class文件的改动，如果监测到有class文件被更新的，服务器会自动重新加载Web应用。\n\n### web.xml\n* tomcat config 目录下的web.xml为服务器全局作用域，一般用来配置全局设置；\n* java项目中WEB-INF目录下的web.xml为局部作用域。\n\n### Web应用的目录结构\n* 假设在$CATALINA_HOME/webapps下有helloapp的web应用。\n* /helloapp：Web应用的根目录，所有的jsp文件和html文件都在此目录下\n* /helloapp/WEB_INF：存放该web应用发布时的描述文件web.xml\n* /helloapp/WEB_INF/class：存放各种class文件，Servlet文件也存放于此目录下\n* /helloapp/WEB_INF/lib：存放各钟Web应用所需要的jar文件。比如可以存放JDBC驱动程序的JAR文件\n\n### tomcat8管理页面配置\n* 修改tomcat-users.xml如下：\n```\n<role rolename=\"manager\"/>\n<role rolename=\"manager-gui\"/>\n<role rolename=\"admin\"/>\n<user username=\"user\" password=\"password\" roles=\"admin,manager,manager-gui\"/>\n```\n* 同时还要修改conf/Catalina/localhost/manager.xml 内容如下：\n```\n<Context privileged=\"true\" antiResourceLocking=\"false\"\n         docBase=\"${catalina.home}/webapps/manager\">\n    <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"^.*$\" />\n</Context>\n```\n\n### tomcat项目部署的三种方式\n1. 将 Web 项目文件【同样也可以复制生成的war】拷贝到Webapps目录中。\n2. 在Tomcat中的Conf目录中，在Server.Xml中的，<Host/>节点中添加：\n`<Context Path=\"/Hello\"Docbase=\"D:\\Users\\WebProject\\WebContent\" Debug=\"0\" Privileged=\"True\" Reloadable=\"True\"></Context>`\n3. 创建一个Context文件,在conf目录中，新建 Catalina＼localhost目录，在该目录中新建一个xml文件，名字不可以随意取，要和path后的那个名字一致，按照下边这个path的配置，xml的名字应该就应该是hello（hello.xml），该xml文件的内容为：\n`<Context path=\"/hello\" docBase=\"E:\\workspace\\hello\\WebRoot\" debug=\"0\" privileged=\"true\"></Context>`\n\n### tomcat启动脚本\n1. startup.bat 是tomcat的启动选项。\n2. catalina.bat 是tomcat的配置项，里面可以对tomcat的虚拟内存的大小等，startup.bat最后调用 catalina.bat run。\n3. CATALINA_HOME和CATALINA_BASE概念是为了解决这样的场景：\n> 你需要在一台机器上面部署多个Tomcat实例，但是你又不想创建多个Tomcat的副本，换句话说就是让这些Tomcat副本拥有自己的工作目录但是共享Tomcat的代码。\n> **catalina.home(安装目录)**：指向公用信息的位置，就是bin和lib的父目录。\n> **catalina.base(工作目录)**：指向每个Tomcat目录私有信息的位置，就是conf、logs、temp、webapps和work的父目录。\n\n---\n\n### Idea与Tomcat的配置\n##### 一、先说一下与Tomcat相关的两个配置：\n1. 配置默认端口\n 在tomcat安装目录的conf目录下的server.xml文件中，以下内容中的port属性指定了默认端口：\n `<Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/>`\n\n2. 将url与web程序目录绑定\n 默认的根目录是tomcat7\\webapps\\ROOT，我们可以在conf\\server.xml文件Host标签中指定根目录和其他目录，例如：\n ```\n <Host appBase=\"webapps\" autoDeploy=\"true\" name=\"localhost\" unpackWARs=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" prefix=\"localhost_access_log.\" suffix=\".txt\"/>\n\n        <Context docBase=\"F:\\aaa\" path=\"/aaa\" reloadable=\"true\"/>\n        <Context docBase=\"F:\\bbb\" path=\"/bbb\" debug=\"0\"\nreloadable=\"true\" crossContext=\"true\" />\n      </Host>\n ```\n **根据上面的配置，我们访问 http://127.0.0.1/aaa 时候，使用F:\\aaa目录中的web程序，bbb同理。根路径不变。**\n\n _在Tomcat默认安装后，tomcat的主目录是webapps/root目录，所以如果想改变tomcat的主目录的话可以如下所做:_\n > **方法一**：\n 打开C:/Tomcat/conf/server.xml，在<host></host>之间加入下面代码：\n ```\n <Context docBase=\"d:/Tomcat 5.5/webapps/medi\" path=\"\" debug=\"0\"  reloadable=\"true\"/>\n ```\n\n >**方法二**：\n  将tomcat安装目录下的ROOT下的所有文件全部删除，然后将工程的解压后的文件全部拷进去。\n\n >**方法三**：\n Tomcat5.0以下版本在d:/Tomcat/conf/Catalina/localhost目录下会自动生成了一个ROOT.Xml，\n 但是5.0以上版本不再生成此文件，所以可以新建个ROOT.xml,在里面加入如下代码：\n ```\n <?Xml version='1.0' encoding='utf-8'?>\n  <Context crossContext=\"true\" docBase=\"d:/Tomcat 5.5/webapps/medi\" path=\"\" reloadable=\"true\">\n</Context>\n ```\n\n##### 二、Idea运行Tomcat的问题：\nIDEA运行tomcat时候重新设置了变量，以下是其启动tomcat时候的部分输出：\n```\nUsing CATALINA_BASE:   \"C:\\Users\\suyf\\.IntelliJIdea2016.3\\system\\tomcat\\Unnamed_ssm_3\"\nUsing CATALINA_HOME:   \"D:\\tomcat\\apache-tomcat-8.0.36\"\nUsing CATALINA_TMPDIR: \"D:\\tomcat\\apache-tomcat-8.0.36\\temp\"\nUsing JRE_HOME:        \"D:\\Java\\jre1.8.0\"\nUsing CLASSPATH:       \"D:\\tomcat\\apache-tomcat-8.0.36\\bin\\bootstrap.jar;D:\\tomcat\\apache-tomcat-8.0.36\\bin\\tomcat-juli.jar\"\n```\n我们打开目录C:\\Users\\suyf\\.IntelliJIdea2016.3\\system\\tomcat\\Unnamed_ssm_3，可以看到在conf\\Catalina\\localhost目录里面生成了ROOT.xml文件，使用了上述**修改tomcat主目录的方法三**，内容如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context path=\"\" docBase=\"C:\\Users\\suyf\\IdeaProjects\\ssm\\target\\ssm\" />\n```\n","source":"_posts/tomcat笔记.md","raw":"---\ntitle: tomcat笔记\ndate: 2017-04-12 21:23:21\ntags:\n  - tomcat\ncategories: tomcat相关\n---\n\n### tomcat目录\n1. webapps：tomcat默认部署路径。\n2. wtpwebapps： eclipse默认部署路径。\n3. 两者同时存在，运行bin中的startup.bat,运行wtpwebapps中部署的项目。\n\n### conf目录\n1. server.xml：tomcat的主配置文件。\n2. context.xml：所有host的默认配置信息。\n3. web.xml：为所有tomcat内的web应用程序提供默认配置信息。\n4. tomcat-users.xml：tomcat的角色配置文件。\n\n### server.xml配置\n1. 顶层元素<Server>: port--指定一个端口，这个端口负责监听关闭tomcat的请求。\n2. 顶层元素<Service>: name--指定service的名字。\n3. 连接器类元素<Connector>: port--指定服务器要监听的端口，并在这个端口监听来自客户端的请求。\n4. 容器类元素<Context>: 代表运行在虚拟主机上的单个web应用:\n> `<Context path=\"bbs\" docBase=\"bbs\" debug=\"0\" reloadable=\"true\"/>`\n> 1. path:指定访问该Web应用的URL入口.\n> 2. docBase:指定Web应用的文件路径，可以给定绝对路径，也可以给定相对于<Host>的appBase属性的相对路径，如果Web应用采用开放目录结构，则指定Web应用的根目录，如果Web应用是个war文件，则指定war文件的路径。\n>3. reloadable:如果这个属性设为true，tomcat服务器在运行状态下会监视在WEB-INF/classes和WEB-INF/lib目录下class文件的改动，如果监测到有class文件被更新的，服务器会自动重新加载Web应用。\n\n### web.xml\n* tomcat config 目录下的web.xml为服务器全局作用域，一般用来配置全局设置；\n* java项目中WEB-INF目录下的web.xml为局部作用域。\n\n### Web应用的目录结构\n* 假设在$CATALINA_HOME/webapps下有helloapp的web应用。\n* /helloapp：Web应用的根目录，所有的jsp文件和html文件都在此目录下\n* /helloapp/WEB_INF：存放该web应用发布时的描述文件web.xml\n* /helloapp/WEB_INF/class：存放各种class文件，Servlet文件也存放于此目录下\n* /helloapp/WEB_INF/lib：存放各钟Web应用所需要的jar文件。比如可以存放JDBC驱动程序的JAR文件\n\n### tomcat8管理页面配置\n* 修改tomcat-users.xml如下：\n```\n<role rolename=\"manager\"/>\n<role rolename=\"manager-gui\"/>\n<role rolename=\"admin\"/>\n<user username=\"user\" password=\"password\" roles=\"admin,manager,manager-gui\"/>\n```\n* 同时还要修改conf/Catalina/localhost/manager.xml 内容如下：\n```\n<Context privileged=\"true\" antiResourceLocking=\"false\"\n         docBase=\"${catalina.home}/webapps/manager\">\n    <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"^.*$\" />\n</Context>\n```\n\n### tomcat项目部署的三种方式\n1. 将 Web 项目文件【同样也可以复制生成的war】拷贝到Webapps目录中。\n2. 在Tomcat中的Conf目录中，在Server.Xml中的，<Host/>节点中添加：\n`<Context Path=\"/Hello\"Docbase=\"D:\\Users\\WebProject\\WebContent\" Debug=\"0\" Privileged=\"True\" Reloadable=\"True\"></Context>`\n3. 创建一个Context文件,在conf目录中，新建 Catalina＼localhost目录，在该目录中新建一个xml文件，名字不可以随意取，要和path后的那个名字一致，按照下边这个path的配置，xml的名字应该就应该是hello（hello.xml），该xml文件的内容为：\n`<Context path=\"/hello\" docBase=\"E:\\workspace\\hello\\WebRoot\" debug=\"0\" privileged=\"true\"></Context>`\n\n### tomcat启动脚本\n1. startup.bat 是tomcat的启动选项。\n2. catalina.bat 是tomcat的配置项，里面可以对tomcat的虚拟内存的大小等，startup.bat最后调用 catalina.bat run。\n3. CATALINA_HOME和CATALINA_BASE概念是为了解决这样的场景：\n> 你需要在一台机器上面部署多个Tomcat实例，但是你又不想创建多个Tomcat的副本，换句话说就是让这些Tomcat副本拥有自己的工作目录但是共享Tomcat的代码。\n> **catalina.home(安装目录)**：指向公用信息的位置，就是bin和lib的父目录。\n> **catalina.base(工作目录)**：指向每个Tomcat目录私有信息的位置，就是conf、logs、temp、webapps和work的父目录。\n\n---\n\n### Idea与Tomcat的配置\n##### 一、先说一下与Tomcat相关的两个配置：\n1. 配置默认端口\n 在tomcat安装目录的conf目录下的server.xml文件中，以下内容中的port属性指定了默认端口：\n `<Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/>`\n\n2. 将url与web程序目录绑定\n 默认的根目录是tomcat7\\webapps\\ROOT，我们可以在conf\\server.xml文件Host标签中指定根目录和其他目录，例如：\n ```\n <Host appBase=\"webapps\" autoDeploy=\"true\" name=\"localhost\" unpackWARs=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" prefix=\"localhost_access_log.\" suffix=\".txt\"/>\n\n        <Context docBase=\"F:\\aaa\" path=\"/aaa\" reloadable=\"true\"/>\n        <Context docBase=\"F:\\bbb\" path=\"/bbb\" debug=\"0\"\nreloadable=\"true\" crossContext=\"true\" />\n      </Host>\n ```\n **根据上面的配置，我们访问 http://127.0.0.1/aaa 时候，使用F:\\aaa目录中的web程序，bbb同理。根路径不变。**\n\n _在Tomcat默认安装后，tomcat的主目录是webapps/root目录，所以如果想改变tomcat的主目录的话可以如下所做:_\n > **方法一**：\n 打开C:/Tomcat/conf/server.xml，在<host></host>之间加入下面代码：\n ```\n <Context docBase=\"d:/Tomcat 5.5/webapps/medi\" path=\"\" debug=\"0\"  reloadable=\"true\"/>\n ```\n\n >**方法二**：\n  将tomcat安装目录下的ROOT下的所有文件全部删除，然后将工程的解压后的文件全部拷进去。\n\n >**方法三**：\n Tomcat5.0以下版本在d:/Tomcat/conf/Catalina/localhost目录下会自动生成了一个ROOT.Xml，\n 但是5.0以上版本不再生成此文件，所以可以新建个ROOT.xml,在里面加入如下代码：\n ```\n <?Xml version='1.0' encoding='utf-8'?>\n  <Context crossContext=\"true\" docBase=\"d:/Tomcat 5.5/webapps/medi\" path=\"\" reloadable=\"true\">\n</Context>\n ```\n\n##### 二、Idea运行Tomcat的问题：\nIDEA运行tomcat时候重新设置了变量，以下是其启动tomcat时候的部分输出：\n```\nUsing CATALINA_BASE:   \"C:\\Users\\suyf\\.IntelliJIdea2016.3\\system\\tomcat\\Unnamed_ssm_3\"\nUsing CATALINA_HOME:   \"D:\\tomcat\\apache-tomcat-8.0.36\"\nUsing CATALINA_TMPDIR: \"D:\\tomcat\\apache-tomcat-8.0.36\\temp\"\nUsing JRE_HOME:        \"D:\\Java\\jre1.8.0\"\nUsing CLASSPATH:       \"D:\\tomcat\\apache-tomcat-8.0.36\\bin\\bootstrap.jar;D:\\tomcat\\apache-tomcat-8.0.36\\bin\\tomcat-juli.jar\"\n```\n我们打开目录C:\\Users\\suyf\\.IntelliJIdea2016.3\\system\\tomcat\\Unnamed_ssm_3，可以看到在conf\\Catalina\\localhost目录里面生成了ROOT.xml文件，使用了上述**修改tomcat主目录的方法三**，内容如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context path=\"\" docBase=\"C:\\Users\\suyf\\IdeaProjects\\ssm\\target\\ssm\" />\n```\n","slug":"tomcat笔记","published":1,"updated":"2017-04-19T12:41:49.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q12e000odkw3k9qgbnbe","content":"<h3 id=\"tomcat目录\"><a href=\"#tomcat目录\" class=\"headerlink\" title=\"tomcat目录\"></a>tomcat目录</h3><ol>\n<li>webapps：tomcat默认部署路径。</li>\n<li>wtpwebapps： eclipse默认部署路径。</li>\n<li>两者同时存在，运行bin中的startup.bat,运行wtpwebapps中部署的项目。</li>\n</ol>\n<h3 id=\"conf目录\"><a href=\"#conf目录\" class=\"headerlink\" title=\"conf目录\"></a>conf目录</h3><ol>\n<li>server.xml：tomcat的主配置文件。</li>\n<li>context.xml：所有host的默认配置信息。</li>\n<li>web.xml：为所有tomcat内的web应用程序提供默认配置信息。</li>\n<li>tomcat-users.xml：tomcat的角色配置文件。</li>\n</ol>\n<h3 id=\"server-xml配置\"><a href=\"#server-xml配置\" class=\"headerlink\" title=\"server.xml配置\"></a>server.xml配置</h3><ol>\n<li>顶层元素<server>: port–指定一个端口，这个端口负责监听关闭tomcat的请求。</server></li>\n<li>顶层元素<service>: name–指定service的名字。</service></li>\n<li>连接器类元素<connector>: port–指定服务器要监听的端口，并在这个端口监听来自客户端的请求。</connector></li>\n<li>容器类元素<context>: 代表运行在虚拟主机上的单个web应用:<blockquote>\n<p><code>&lt;Context path=&quot;bbs&quot; docBase=&quot;bbs&quot; debug=&quot;0&quot; reloadable=&quot;true&quot;/&gt;</code></p>\n<ol>\n<li>path:指定访问该Web应用的URL入口.</li>\n<li>docBase:指定Web应用的文件路径，可以给定绝对路径，也可以给定相对于<host>的appBase属性的相对路径，如果Web应用采用开放目录结构，则指定Web应用的根目录，如果Web应用是个war文件，则指定war文件的路径。</host></li>\n<li>reloadable:如果这个属性设为true，tomcat服务器在运行状态下会监视在WEB-INF/classes和WEB-INF/lib目录下class文件的改动，如果监测到有class文件被更新的，服务器会自动重新加载Web应用。</li>\n</ol>\n</blockquote>\n</context></li>\n</ol>\n<h3 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h3><ul>\n<li>tomcat config 目录下的web.xml为服务器全局作用域，一般用来配置全局设置；</li>\n<li>java项目中WEB-INF目录下的web.xml为局部作用域。</li>\n</ul>\n<h3 id=\"Web应用的目录结构\"><a href=\"#Web应用的目录结构\" class=\"headerlink\" title=\"Web应用的目录结构\"></a>Web应用的目录结构</h3><ul>\n<li>假设在$CATALINA_HOME/webapps下有helloapp的web应用。</li>\n<li>/helloapp：Web应用的根目录，所有的jsp文件和html文件都在此目录下</li>\n<li>/helloapp/WEB_INF：存放该web应用发布时的描述文件web.xml</li>\n<li>/helloapp/WEB_INF/class：存放各种class文件，Servlet文件也存放于此目录下</li>\n<li>/helloapp/WEB_INF/lib：存放各钟Web应用所需要的jar文件。比如可以存放JDBC驱动程序的JAR文件</li>\n</ul>\n<h3 id=\"tomcat8管理页面配置\"><a href=\"#tomcat8管理页面配置\" class=\"headerlink\" title=\"tomcat8管理页面配置\"></a>tomcat8管理页面配置</h3><ul>\n<li><p>修改tomcat-users.xml如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;role rolename=&quot;manager&quot;/&gt;</div><div class=\"line\">&lt;role rolename=&quot;manager-gui&quot;/&gt;</div><div class=\"line\">&lt;role rolename=&quot;admin&quot;/&gt;</div><div class=\"line\">&lt;user username=&quot;user&quot; password=&quot;password&quot; roles=&quot;admin,manager,manager-gui&quot;/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>同时还要修改conf/Catalina/localhost/manager.xml 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot;</div><div class=\"line\">         docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;</div><div class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;</div><div class=\"line\">&lt;/Context&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"tomcat项目部署的三种方式\"><a href=\"#tomcat项目部署的三种方式\" class=\"headerlink\" title=\"tomcat项目部署的三种方式\"></a>tomcat项目部署的三种方式</h3><ol>\n<li>将 Web 项目文件【同样也可以复制生成的war】拷贝到Webapps目录中。</li>\n<li>在Tomcat中的Conf目录中，在Server.Xml中的，<host>节点中添加：<br><code>&lt;Context Path=&quot;/Hello&quot;Docbase=&quot;D:\\Users\\WebProject\\WebContent&quot; Debug=&quot;0&quot; Privileged=&quot;True&quot; Reloadable=&quot;True&quot;&gt;&lt;/Context&gt;</code></host></li>\n<li>创建一个Context文件,在conf目录中，新建 Catalina＼localhost目录，在该目录中新建一个xml文件，名字不可以随意取，要和path后的那个名字一致，按照下边这个path的配置，xml的名字应该就应该是hello（hello.xml），该xml文件的内容为：<br><code>&lt;Context path=&quot;/hello&quot; docBase=&quot;E:\\workspace\\hello\\WebRoot&quot; debug=&quot;0&quot; privileged=&quot;true&quot;&gt;&lt;/Context&gt;</code></li>\n</ol>\n<h3 id=\"tomcat启动脚本\"><a href=\"#tomcat启动脚本\" class=\"headerlink\" title=\"tomcat启动脚本\"></a>tomcat启动脚本</h3><ol>\n<li>startup.bat 是tomcat的启动选项。</li>\n<li>catalina.bat 是tomcat的配置项，里面可以对tomcat的虚拟内存的大小等，startup.bat最后调用 catalina.bat run。</li>\n<li>CATALINA_HOME和CATALINA_BASE概念是为了解决这样的场景：<blockquote>\n<p>你需要在一台机器上面部署多个Tomcat实例，但是你又不想创建多个Tomcat的副本，换句话说就是让这些Tomcat副本拥有自己的工作目录但是共享Tomcat的代码。<br><strong>catalina.home(安装目录)</strong>：指向公用信息的位置，就是bin和lib的父目录。<br><strong>catalina.base(工作目录)</strong>：指向每个Tomcat目录私有信息的位置，就是conf、logs、temp、webapps和work的父目录。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h3 id=\"Idea与Tomcat的配置\"><a href=\"#Idea与Tomcat的配置\" class=\"headerlink\" title=\"Idea与Tomcat的配置\"></a>Idea与Tomcat的配置</h3><h5 id=\"一、先说一下与Tomcat相关的两个配置：\"><a href=\"#一、先说一下与Tomcat相关的两个配置：\" class=\"headerlink\" title=\"一、先说一下与Tomcat相关的两个配置：\"></a>一、先说一下与Tomcat相关的两个配置：</h5><ol>\n<li><p>配置默认端口<br>在tomcat安装目录的conf目录下的server.xml文件中，以下内容中的port属性指定了默认端口：<br><code>&lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code></p>\n</li>\n<li><p>将url与web程序目录绑定<br>默认的根目录是tomcat7\\webapps\\ROOT，我们可以在conf\\server.xml文件Host标签中指定根目录和其他目录，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;Host appBase=&quot;webapps&quot; autoDeploy=&quot;true&quot; name=&quot;localhost&quot; unpackWARs=&quot;true&quot;&gt;</div><div class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;Context docBase=&quot;F:\\aaa&quot; path=&quot;/aaa&quot; reloadable=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;Context docBase=&quot;F:\\bbb&quot; path=&quot;/bbb&quot; debug=&quot;0&quot;</div><div class=\"line\">reloadable=&quot;true&quot; crossContext=&quot;true&quot; /&gt;</div><div class=\"line\">      &lt;/Host&gt;</div></pre></td></tr></table></figure>\n<p><strong>根据上面的配置，我们访问 <a href=\"http://127.0.0.1/aaa\" target=\"_blank\" rel=\"external\">http://127.0.0.1/aaa</a> 时候，使用F:\\aaa目录中的web程序，bbb同理。根路径不变。</strong></p>\n<p><em>在Tomcat默认安装后，tomcat的主目录是webapps/root目录，所以如果想改变tomcat的主目录的话可以如下所做:</em></p>\n<blockquote>\n<p><strong>方法一</strong>：<br>打开C:/Tomcat/conf/server.xml，在<host></host>之间加入下面代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Context docBase=&quot;d:/Tomcat 5.5/webapps/medi&quot; path=&quot;&quot; debug=&quot;0&quot;  reloadable=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>方法二</strong>：<br>将tomcat安装目录下的ROOT下的所有文件全部删除，然后将工程的解压后的文件全部拷进去。</p>\n<p><strong>方法三</strong>：<br>Tomcat5.0以下版本在d:/Tomcat/conf/Catalina/localhost目录下会自动生成了一个ROOT.Xml，<br>但是5.0以上版本不再生成此文件，所以可以新建个ROOT.xml,在里面加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;?Xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class=\"line\">  &lt;Context crossContext=&quot;true&quot; docBase=&quot;d:/Tomcat 5.5/webapps/medi&quot; path=&quot;&quot; reloadable=&quot;true&quot;&gt;</div><div class=\"line\">&lt;/Context&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"二、Idea运行Tomcat的问题：\"><a href=\"#二、Idea运行Tomcat的问题：\" class=\"headerlink\" title=\"二、Idea运行Tomcat的问题：\"></a>二、Idea运行Tomcat的问题：</h5><p>IDEA运行tomcat时候重新设置了变量，以下是其启动tomcat时候的部分输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Using CATALINA_BASE:   &quot;C:\\Users\\suyf\\.IntelliJIdea2016.3\\system\\tomcat\\Unnamed_ssm_3&quot;</div><div class=\"line\">Using CATALINA_HOME:   &quot;D:\\tomcat\\apache-tomcat-8.0.36&quot;</div><div class=\"line\">Using CATALINA_TMPDIR: &quot;D:\\tomcat\\apache-tomcat-8.0.36\\temp&quot;</div><div class=\"line\">Using JRE_HOME:        &quot;D:\\Java\\jre1.8.0&quot;</div><div class=\"line\">Using CLASSPATH:       &quot;D:\\tomcat\\apache-tomcat-8.0.36\\bin\\bootstrap.jar;D:\\tomcat\\apache-tomcat-8.0.36\\bin\\tomcat-juli.jar&quot;</div></pre></td></tr></table></figure></p>\n<p>我们打开目录C:\\Users\\suyf.IntelliJIdea2016.3\\system\\tomcat\\Unnamed_ssm_3，可以看到在conf\\Catalina\\localhost目录里面生成了ROOT.xml文件，使用了上述<strong>修改tomcat主目录的方法三</strong>，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;Context path=&quot;&quot; docBase=&quot;C:\\Users\\suyf\\IdeaProjects\\ssm\\target\\ssm&quot; /&gt;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"tomcat目录\"><a href=\"#tomcat目录\" class=\"headerlink\" title=\"tomcat目录\"></a>tomcat目录</h3><ol>\n<li>webapps：tomcat默认部署路径。</li>\n<li>wtpwebapps： eclipse默认部署路径。</li>\n<li>两者同时存在，运行bin中的startup.bat,运行wtpwebapps中部署的项目。</li>\n</ol>\n<h3 id=\"conf目录\"><a href=\"#conf目录\" class=\"headerlink\" title=\"conf目录\"></a>conf目录</h3><ol>\n<li>server.xml：tomcat的主配置文件。</li>\n<li>context.xml：所有host的默认配置信息。</li>\n<li>web.xml：为所有tomcat内的web应用程序提供默认配置信息。</li>\n<li>tomcat-users.xml：tomcat的角色配置文件。</li>\n</ol>\n<h3 id=\"server-xml配置\"><a href=\"#server-xml配置\" class=\"headerlink\" title=\"server.xml配置\"></a>server.xml配置</h3><ol>\n<li>顶层元素<Server>: port–指定一个端口，这个端口负责监听关闭tomcat的请求。</li>\n<li>顶层元素<Service>: name–指定service的名字。</li>\n<li>连接器类元素<Connector>: port–指定服务器要监听的端口，并在这个端口监听来自客户端的请求。</li>\n<li>容器类元素<Context>: 代表运行在虚拟主机上的单个web应用:<blockquote>\n<p><code>&lt;Context path=&quot;bbs&quot; docBase=&quot;bbs&quot; debug=&quot;0&quot; reloadable=&quot;true&quot;/&gt;</code></p>\n<ol>\n<li>path:指定访问该Web应用的URL入口.</li>\n<li>docBase:指定Web应用的文件路径，可以给定绝对路径，也可以给定相对于<Host>的appBase属性的相对路径，如果Web应用采用开放目录结构，则指定Web应用的根目录，如果Web应用是个war文件，则指定war文件的路径。</li>\n<li>reloadable:如果这个属性设为true，tomcat服务器在运行状态下会监视在WEB-INF/classes和WEB-INF/lib目录下class文件的改动，如果监测到有class文件被更新的，服务器会自动重新加载Web应用。</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h3><ul>\n<li>tomcat config 目录下的web.xml为服务器全局作用域，一般用来配置全局设置；</li>\n<li>java项目中WEB-INF目录下的web.xml为局部作用域。</li>\n</ul>\n<h3 id=\"Web应用的目录结构\"><a href=\"#Web应用的目录结构\" class=\"headerlink\" title=\"Web应用的目录结构\"></a>Web应用的目录结构</h3><ul>\n<li>假设在$CATALINA_HOME/webapps下有helloapp的web应用。</li>\n<li>/helloapp：Web应用的根目录，所有的jsp文件和html文件都在此目录下</li>\n<li>/helloapp/WEB_INF：存放该web应用发布时的描述文件web.xml</li>\n<li>/helloapp/WEB_INF/class：存放各种class文件，Servlet文件也存放于此目录下</li>\n<li>/helloapp/WEB_INF/lib：存放各钟Web应用所需要的jar文件。比如可以存放JDBC驱动程序的JAR文件</li>\n</ul>\n<h3 id=\"tomcat8管理页面配置\"><a href=\"#tomcat8管理页面配置\" class=\"headerlink\" title=\"tomcat8管理页面配置\"></a>tomcat8管理页面配置</h3><ul>\n<li><p>修改tomcat-users.xml如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;role rolename=&quot;manager&quot;/&gt;</div><div class=\"line\">&lt;role rolename=&quot;manager-gui&quot;/&gt;</div><div class=\"line\">&lt;role rolename=&quot;admin&quot;/&gt;</div><div class=\"line\">&lt;user username=&quot;user&quot; password=&quot;password&quot; roles=&quot;admin,manager,manager-gui&quot;/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>同时还要修改conf/Catalina/localhost/manager.xml 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot;</div><div class=\"line\">         docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;</div><div class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;</div><div class=\"line\">&lt;/Context&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"tomcat项目部署的三种方式\"><a href=\"#tomcat项目部署的三种方式\" class=\"headerlink\" title=\"tomcat项目部署的三种方式\"></a>tomcat项目部署的三种方式</h3><ol>\n<li>将 Web 项目文件【同样也可以复制生成的war】拷贝到Webapps目录中。</li>\n<li>在Tomcat中的Conf目录中，在Server.Xml中的，<Host/>节点中添加：<br><code>&lt;Context Path=&quot;/Hello&quot;Docbase=&quot;D:\\Users\\WebProject\\WebContent&quot; Debug=&quot;0&quot; Privileged=&quot;True&quot; Reloadable=&quot;True&quot;&gt;&lt;/Context&gt;</code></li>\n<li>创建一个Context文件,在conf目录中，新建 Catalina＼localhost目录，在该目录中新建一个xml文件，名字不可以随意取，要和path后的那个名字一致，按照下边这个path的配置，xml的名字应该就应该是hello（hello.xml），该xml文件的内容为：<br><code>&lt;Context path=&quot;/hello&quot; docBase=&quot;E:\\workspace\\hello\\WebRoot&quot; debug=&quot;0&quot; privileged=&quot;true&quot;&gt;&lt;/Context&gt;</code></li>\n</ol>\n<h3 id=\"tomcat启动脚本\"><a href=\"#tomcat启动脚本\" class=\"headerlink\" title=\"tomcat启动脚本\"></a>tomcat启动脚本</h3><ol>\n<li>startup.bat 是tomcat的启动选项。</li>\n<li>catalina.bat 是tomcat的配置项，里面可以对tomcat的虚拟内存的大小等，startup.bat最后调用 catalina.bat run。</li>\n<li>CATALINA_HOME和CATALINA_BASE概念是为了解决这样的场景：<blockquote>\n<p>你需要在一台机器上面部署多个Tomcat实例，但是你又不想创建多个Tomcat的副本，换句话说就是让这些Tomcat副本拥有自己的工作目录但是共享Tomcat的代码。<br><strong>catalina.home(安装目录)</strong>：指向公用信息的位置，就是bin和lib的父目录。<br><strong>catalina.base(工作目录)</strong>：指向每个Tomcat目录私有信息的位置，就是conf、logs、temp、webapps和work的父目录。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h3 id=\"Idea与Tomcat的配置\"><a href=\"#Idea与Tomcat的配置\" class=\"headerlink\" title=\"Idea与Tomcat的配置\"></a>Idea与Tomcat的配置</h3><h5 id=\"一、先说一下与Tomcat相关的两个配置：\"><a href=\"#一、先说一下与Tomcat相关的两个配置：\" class=\"headerlink\" title=\"一、先说一下与Tomcat相关的两个配置：\"></a>一、先说一下与Tomcat相关的两个配置：</h5><ol>\n<li><p>配置默认端口<br>在tomcat安装目录的conf目录下的server.xml文件中，以下内容中的port属性指定了默认端口：<br><code>&lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code></p>\n</li>\n<li><p>将url与web程序目录绑定<br>默认的根目录是tomcat7\\webapps\\ROOT，我们可以在conf\\server.xml文件Host标签中指定根目录和其他目录，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;Host appBase=&quot;webapps&quot; autoDeploy=&quot;true&quot; name=&quot;localhost&quot; unpackWARs=&quot;true&quot;&gt;</div><div class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;Context docBase=&quot;F:\\aaa&quot; path=&quot;/aaa&quot; reloadable=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;Context docBase=&quot;F:\\bbb&quot; path=&quot;/bbb&quot; debug=&quot;0&quot;</div><div class=\"line\">reloadable=&quot;true&quot; crossContext=&quot;true&quot; /&gt;</div><div class=\"line\">      &lt;/Host&gt;</div></pre></td></tr></table></figure>\n<p><strong>根据上面的配置，我们访问 <a href=\"http://127.0.0.1/aaa\">http://127.0.0.1/aaa</a> 时候，使用F:\\aaa目录中的web程序，bbb同理。根路径不变。</strong></p>\n<p><em>在Tomcat默认安装后，tomcat的主目录是webapps/root目录，所以如果想改变tomcat的主目录的话可以如下所做:</em></p>\n<blockquote>\n<p><strong>方法一</strong>：<br>打开C:/Tomcat/conf/server.xml，在<host></host>之间加入下面代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Context docBase=&quot;d:/Tomcat 5.5/webapps/medi&quot; path=&quot;&quot; debug=&quot;0&quot;  reloadable=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>方法二</strong>：<br>将tomcat安装目录下的ROOT下的所有文件全部删除，然后将工程的解压后的文件全部拷进去。</p>\n<p><strong>方法三</strong>：<br>Tomcat5.0以下版本在d:/Tomcat/conf/Catalina/localhost目录下会自动生成了一个ROOT.Xml，<br>但是5.0以上版本不再生成此文件，所以可以新建个ROOT.xml,在里面加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;?Xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class=\"line\">  &lt;Context crossContext=&quot;true&quot; docBase=&quot;d:/Tomcat 5.5/webapps/medi&quot; path=&quot;&quot; reloadable=&quot;true&quot;&gt;</div><div class=\"line\">&lt;/Context&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"二、Idea运行Tomcat的问题：\"><a href=\"#二、Idea运行Tomcat的问题：\" class=\"headerlink\" title=\"二、Idea运行Tomcat的问题：\"></a>二、Idea运行Tomcat的问题：</h5><p>IDEA运行tomcat时候重新设置了变量，以下是其启动tomcat时候的部分输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Using CATALINA_BASE:   &quot;C:\\Users\\suyf\\.IntelliJIdea2016.3\\system\\tomcat\\Unnamed_ssm_3&quot;</div><div class=\"line\">Using CATALINA_HOME:   &quot;D:\\tomcat\\apache-tomcat-8.0.36&quot;</div><div class=\"line\">Using CATALINA_TMPDIR: &quot;D:\\tomcat\\apache-tomcat-8.0.36\\temp&quot;</div><div class=\"line\">Using JRE_HOME:        &quot;D:\\Java\\jre1.8.0&quot;</div><div class=\"line\">Using CLASSPATH:       &quot;D:\\tomcat\\apache-tomcat-8.0.36\\bin\\bootstrap.jar;D:\\tomcat\\apache-tomcat-8.0.36\\bin\\tomcat-juli.jar&quot;</div></pre></td></tr></table></figure></p>\n<p>我们打开目录C:\\Users\\suyf.IntelliJIdea2016.3\\system\\tomcat\\Unnamed_ssm_3，可以看到在conf\\Catalina\\localhost目录里面生成了ROOT.xml文件，使用了上述<strong>修改tomcat主目录的方法三</strong>，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;Context path=&quot;&quot; docBase=&quot;C:\\Users\\suyf\\IdeaProjects\\ssm\\target\\ssm&quot; /&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"理解javascript原型和闭包","date":"2017-04-17T14:41:59.000Z","_content":"\n* 值类型的类型判断用typeof，引用类型的类型判断用instanceof：\n```javascript\nfunction show(x) {\n\n            console.log(typeof(x));    // undefined\n            console.log(typeof(10));   // number\n            console.log(typeof('abc')); // string\n            console.log(typeof(true));  // boolean\n\n            console.log(typeof(function () { }));  //function\n\n            console.log(typeof([1, 'a', true]));  //object\n            console.log(typeof ({ a: 10, b: 20 }));  //object\n            console.log(typeof (null));  //object\n            console.log(typeof (new Number(10)));  //object\n        }\n        show();```\n\n* 一切（引用类型）都是对象，对象是属性的集合。\n\n* 一切对象都是通过函数来创建的：\n```javascript\n        //var obj = { a: 10, b: 20 };\n        //var arr = [5, 'x', true];\n\n        var obj = new Object();\n        obj.a = 10;\n        obj.b = 20;\n\n        var arr = new Array();\n        arr[0] = 5;\n        arr[1] = 'x';\n        arr[2] = true;\n```\n\n* 每个函数都有一个属性叫做prototype。这个prototype的属性值是一个对象（属性的集合，再次强调！），默认的只有一个叫做constructor的属性，指向这个函数本身。\n\n* 每个对象都有一个隐藏的属性——“\\__proto\\__”，这个属性引用了创建这个对象的函数的prototype。即：fn.\\__proto\\__ === Fn.prototype。\n\n* 每个函数function都有一个prototype，即原型。这里再加一句话——每个对象都有一个\\__proto\\__，可成为隐式原型。\n\n* 每个对象都有一个\\__proto\\__属性，指向创建该对象的函数的prototype(原型)。\n\n* Object.prototype确实一个特例——它的\\__proto\\__指向的是null，切记切记！\n\n* “f1 instanceof Object” Instanceof的判断队则是：沿着A的\\__proto\\__这条线来找，同时沿着B的prototype这条线来找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。\n\n* 访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着\\__proto\\__这条链向上找，这就是原型链。\n---\n* 在函数中this到底取何值，是在函数真正被调用执行的时候确定的，函数定义的时候确定不了。\n\n* this的取值分四种情况：\n    1. 如果函数作为构造函数，this就代表它即将new出来的对象；如果直接调用，this是window。\n    2. 如果函数作为对象的一个属性时，**并且作为对象的一个属性被调用时**，函数中的this指向该对象。\n    3. 如果函数被call和apply调用时，this的值就取传入的对象的值。\n    4. 全局环境和普通函数在调用时，其中的this也都是window。\n\n\n* javascript没有块级作用域--javascript除了全局作用域之外，只有函数可以创建的作用域。\n\n* 我们在声明变量时，全局代码要在代码前端声明，函数中要在函数体一开始就声明好。除了这两个地方，其他地方都不要出现变量声明。而且建议用“单var”形式。\n\n* 作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。\n\n* 除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时确定。\n\n* 作用域中变量的值是在执行过程中产生的确定的，而作用域却是在函数创建时就确定了。所以，如果要查找一个作用域下某个变量的值，就需要找到这个作用域对应的执行上下文环境，再在其中寻找变量的值。\n\n* 闭包应用的两种情况：函数作为返回值，函数作为参数传递。\n---\n* 所有的对象都有\"\\__proto\\__\"属性，该属性对应该对象的原型\n\n* 所有的函数对象都有\"prototype\"属性，该属性的值会被赋值给该函数创建的对象的\"\\__proto\\__\"属性\n\n* 所有的原型对象都有\"constructor\"属性，该属性对应创建所有指向该原型的实例的构造函数\n\n* 函数对象和原型对象通过\"prototype\"和\"constructor\"属性进行相互关联\n","source":"_posts/理解javascript原型和闭包.md","raw":"---\ntitle: 理解javascript原型和闭包\ndate: 2017-04-17 22:41:59\ntags:\n  - javascript\n  - 闭包\ncategories: JavaScript相关\n---\n\n* 值类型的类型判断用typeof，引用类型的类型判断用instanceof：\n```javascript\nfunction show(x) {\n\n            console.log(typeof(x));    // undefined\n            console.log(typeof(10));   // number\n            console.log(typeof('abc')); // string\n            console.log(typeof(true));  // boolean\n\n            console.log(typeof(function () { }));  //function\n\n            console.log(typeof([1, 'a', true]));  //object\n            console.log(typeof ({ a: 10, b: 20 }));  //object\n            console.log(typeof (null));  //object\n            console.log(typeof (new Number(10)));  //object\n        }\n        show();```\n\n* 一切（引用类型）都是对象，对象是属性的集合。\n\n* 一切对象都是通过函数来创建的：\n```javascript\n        //var obj = { a: 10, b: 20 };\n        //var arr = [5, 'x', true];\n\n        var obj = new Object();\n        obj.a = 10;\n        obj.b = 20;\n\n        var arr = new Array();\n        arr[0] = 5;\n        arr[1] = 'x';\n        arr[2] = true;\n```\n\n* 每个函数都有一个属性叫做prototype。这个prototype的属性值是一个对象（属性的集合，再次强调！），默认的只有一个叫做constructor的属性，指向这个函数本身。\n\n* 每个对象都有一个隐藏的属性——“\\__proto\\__”，这个属性引用了创建这个对象的函数的prototype。即：fn.\\__proto\\__ === Fn.prototype。\n\n* 每个函数function都有一个prototype，即原型。这里再加一句话——每个对象都有一个\\__proto\\__，可成为隐式原型。\n\n* 每个对象都有一个\\__proto\\__属性，指向创建该对象的函数的prototype(原型)。\n\n* Object.prototype确实一个特例——它的\\__proto\\__指向的是null，切记切记！\n\n* “f1 instanceof Object” Instanceof的判断队则是：沿着A的\\__proto\\__这条线来找，同时沿着B的prototype这条线来找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。\n\n* 访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着\\__proto\\__这条链向上找，这就是原型链。\n---\n* 在函数中this到底取何值，是在函数真正被调用执行的时候确定的，函数定义的时候确定不了。\n\n* this的取值分四种情况：\n    1. 如果函数作为构造函数，this就代表它即将new出来的对象；如果直接调用，this是window。\n    2. 如果函数作为对象的一个属性时，**并且作为对象的一个属性被调用时**，函数中的this指向该对象。\n    3. 如果函数被call和apply调用时，this的值就取传入的对象的值。\n    4. 全局环境和普通函数在调用时，其中的this也都是window。\n\n\n* javascript没有块级作用域--javascript除了全局作用域之外，只有函数可以创建的作用域。\n\n* 我们在声明变量时，全局代码要在代码前端声明，函数中要在函数体一开始就声明好。除了这两个地方，其他地方都不要出现变量声明。而且建议用“单var”形式。\n\n* 作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。\n\n* 除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时确定。\n\n* 作用域中变量的值是在执行过程中产生的确定的，而作用域却是在函数创建时就确定了。所以，如果要查找一个作用域下某个变量的值，就需要找到这个作用域对应的执行上下文环境，再在其中寻找变量的值。\n\n* 闭包应用的两种情况：函数作为返回值，函数作为参数传递。\n---\n* 所有的对象都有\"\\__proto\\__\"属性，该属性对应该对象的原型\n\n* 所有的函数对象都有\"prototype\"属性，该属性的值会被赋值给该函数创建的对象的\"\\__proto\\__\"属性\n\n* 所有的原型对象都有\"constructor\"属性，该属性对应创建所有指向该原型的实例的构造函数\n\n* 函数对象和原型对象通过\"prototype\"和\"constructor\"属性进行相互关联\n","slug":"理解javascript原型和闭包","published":1,"updated":"2017-04-17T14:56:52.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p5q12h000tdkw3qusov43b","content":"<ul>\n<li><p>值类型的类型判断用typeof，引用类型的类型判断用instanceof：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(x));    <span class=\"comment\">// undefined</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"number\">10</span>));   <span class=\"comment\">// number</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"string\">'abc'</span>)); <span class=\"comment\">// string</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"literal\">true</span>));  <span class=\"comment\">// boolean</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;));  <span class=\"comment\">//function</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>([<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"literal\">true</span>]));  <span class=\"comment\">//object</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> (&#123; <span class=\"attr\">a</span>: <span class=\"number\">10</span>, <span class=\"attr\">b</span>: <span class=\"number\">20</span> &#125;));  <span class=\"comment\">//object</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> (<span class=\"literal\">null</span>));  <span class=\"comment\">//object</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">10</span>)));  <span class=\"comment\">//object</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        show();</div></pre></td></tr></table></figure>\n</li>\n<li><p>一切（引用类型）都是对象，对象是属性的集合。</p>\n</li>\n<li><p>一切对象都是通过函数来创建的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//var obj = &#123; a: 10, b: 20 &#125;;</span></div><div class=\"line\"><span class=\"comment\">//var arr = [5, 'x', true];</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">obj.a = <span class=\"number\">10</span>;</div><div class=\"line\">obj.b = <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;</div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"string\">'x'</span>;</div><div class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>每个函数都有一个属性叫做prototype。这个prototype的属性值是一个对象（属性的集合，再次强调！），默认的只有一个叫做constructor的属性，指向这个函数本身。</p>\n</li>\n<li><p>每个对象都有一个隐藏的属性——“__proto__”，这个属性引用了创建这个对象的函数的prototype。即：fn.__proto__ === Fn.prototype。</p>\n</li>\n<li><p>每个函数function都有一个prototype，即原型。这里再加一句话——每个对象都有一个__proto__，可成为隐式原型。</p>\n</li>\n<li><p>每个对象都有一个__proto__属性，指向创建该对象的函数的prototype(原型)。</p>\n</li>\n<li><p>Object.prototype确实一个特例——它的__proto__指向的是null，切记切记！</p>\n</li>\n<li><p>“f1 instanceof Object” Instanceof的判断队则是：沿着A的__proto__这条线来找，同时沿着B的prototype这条线来找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。</p>\n</li>\n<li><p>访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着__proto__这条链向上找，这就是原型链。</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>在函数中this到底取何值，是在函数真正被调用执行的时候确定的，函数定义的时候确定不了。</p>\n</li>\n<li><p>this的取值分四种情况：</p>\n<ol>\n<li>如果函数作为构造函数，this就代表它即将new出来的对象；如果直接调用，this是window。</li>\n<li>如果函数作为对象的一个属性时，<strong>并且作为对象的一个属性被调用时</strong>，函数中的this指向该对象。</li>\n<li>如果函数被call和apply调用时，this的值就取传入的对象的值。</li>\n<li>全局环境和普通函数在调用时，其中的this也都是window。</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>javascript没有块级作用域–javascript除了全局作用域之外，只有函数可以创建的作用域。</p>\n</li>\n<li><p>我们在声明变量时，全局代码要在代码前端声明，函数中要在函数体一开始就声明好。除了这两个地方，其他地方都不要出现变量声明。而且建议用“单var”形式。</p>\n</li>\n<li><p>作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p>\n</li>\n<li><p>除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时确定。</p>\n</li>\n<li><p>作用域中变量的值是在执行过程中产生的确定的，而作用域却是在函数创建时就确定了。所以，如果要查找一个作用域下某个变量的值，就需要找到这个作用域对应的执行上下文环境，再在其中寻找变量的值。</p>\n</li>\n<li><p>闭包应用的两种情况：函数作为返回值，函数作为参数传递。</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>所有的对象都有”__proto__”属性，该属性对应该对象的原型</p>\n</li>\n<li><p>所有的函数对象都有”prototype”属性，该属性的值会被赋值给该函数创建的对象的”__proto__”属性</p>\n</li>\n<li><p>所有的原型对象都有”constructor”属性，该属性对应创建所有指向该原型的实例的构造函数</p>\n</li>\n<li><p>函数对象和原型对象通过”prototype”和”constructor”属性进行相互关联</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>值类型的类型判断用typeof，引用类型的类型判断用instanceof：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(x));    <span class=\"comment\">// undefined</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"number\">10</span>));   <span class=\"comment\">// number</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"string\">'abc'</span>)); <span class=\"comment\">// string</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"literal\">true</span>));  <span class=\"comment\">// boolean</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;));  <span class=\"comment\">//function</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>([<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"literal\">true</span>]));  <span class=\"comment\">//object</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> (&#123; <span class=\"attr\">a</span>: <span class=\"number\">10</span>, <span class=\"attr\">b</span>: <span class=\"number\">20</span> &#125;));  <span class=\"comment\">//object</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> (<span class=\"literal\">null</span>));  <span class=\"comment\">//object</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">10</span>)));  <span class=\"comment\">//object</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        show();</div></pre></td></tr></table></figure>\n</li>\n<li><p>一切（引用类型）都是对象，对象是属性的集合。</p>\n</li>\n<li><p>一切对象都是通过函数来创建的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//var obj = &#123; a: 10, b: 20 &#125;;</span></div><div class=\"line\"><span class=\"comment\">//var arr = [5, 'x', true];</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">obj.a = <span class=\"number\">10</span>;</div><div class=\"line\">obj.b = <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;</div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"string\">'x'</span>;</div><div class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>每个函数都有一个属性叫做prototype。这个prototype的属性值是一个对象（属性的集合，再次强调！），默认的只有一个叫做constructor的属性，指向这个函数本身。</p>\n</li>\n<li><p>每个对象都有一个隐藏的属性——“__proto__”，这个属性引用了创建这个对象的函数的prototype。即：fn.__proto__ === Fn.prototype。</p>\n</li>\n<li><p>每个函数function都有一个prototype，即原型。这里再加一句话——每个对象都有一个__proto__，可成为隐式原型。</p>\n</li>\n<li><p>每个对象都有一个__proto__属性，指向创建该对象的函数的prototype(原型)。</p>\n</li>\n<li><p>Object.prototype确实一个特例——它的__proto__指向的是null，切记切记！</p>\n</li>\n<li><p>“f1 instanceof Object” Instanceof的判断队则是：沿着A的__proto__这条线来找，同时沿着B的prototype这条线来找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。</p>\n</li>\n<li><p>访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着__proto__这条链向上找，这就是原型链。</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>在函数中this到底取何值，是在函数真正被调用执行的时候确定的，函数定义的时候确定不了。</p>\n</li>\n<li><p>this的取值分四种情况：</p>\n<ol>\n<li>如果函数作为构造函数，this就代表它即将new出来的对象；如果直接调用，this是window。</li>\n<li>如果函数作为对象的一个属性时，<strong>并且作为对象的一个属性被调用时</strong>，函数中的this指向该对象。</li>\n<li>如果函数被call和apply调用时，this的值就取传入的对象的值。</li>\n<li>全局环境和普通函数在调用时，其中的this也都是window。</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>javascript没有块级作用域–javascript除了全局作用域之外，只有函数可以创建的作用域。</p>\n</li>\n<li><p>我们在声明变量时，全局代码要在代码前端声明，函数中要在函数体一开始就声明好。除了这两个地方，其他地方都不要出现变量声明。而且建议用“单var”形式。</p>\n</li>\n<li><p>作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p>\n</li>\n<li><p>除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时确定。</p>\n</li>\n<li><p>作用域中变量的值是在执行过程中产生的确定的，而作用域却是在函数创建时就确定了。所以，如果要查找一个作用域下某个变量的值，就需要找到这个作用域对应的执行上下文环境，再在其中寻找变量的值。</p>\n</li>\n<li><p>闭包应用的两种情况：函数作为返回值，函数作为参数传递。</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>所有的对象都有”__proto__”属性，该属性对应该对象的原型</p>\n</li>\n<li><p>所有的函数对象都有”prototype”属性，该属性的值会被赋值给该函数创建的对象的”__proto__”属性</p>\n</li>\n<li><p>所有的原型对象都有”constructor”属性，该属性对应创建所有指向该原型的实例的构造函数</p>\n</li>\n<li><p>函数对象和原型对象通过”prototype”和”constructor”属性进行相互关联</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1p5q10x0001dkw33lqs6ajc","category_id":"cj1p5q11h0004dkw32twtuxf7","_id":"cj1p5q11z000ddkw3u8snq1em"},{"post_id":"cj1p5q1150003dkw32bny7ol8","category_id":"cj1p5q11v0009dkw3ylg5z9pb","_id":"cj1p5q129000jdkw38qy840n4"},{"post_id":"cj1p5q11m0006dkw347volm5k","category_id":"cj1p5q11v0009dkw3ylg5z9pb","_id":"cj1p5q12g000pdkw399x1r0ns"},{"post_id":"cj1p5q11p0007dkw3nsi78go3","category_id":"cj1p5q129000kdkw3s7okq492","_id":"cj1p5q12j000vdkw3vf0ija5e"},{"post_id":"cj1p5q11r0008dkw3mfgnfnhg","category_id":"cj1p5q12g000rdkw3m9feu9ma","_id":"cj1p5q12l0010dkw3u6rgnpkg"},{"post_id":"cj1p5q11x000cdkw34ns7dezj","category_id":"cj1p5q12k000xdkw3pbr6zkwl","_id":"cj1p5q12o0014dkw3sguw1tux"},{"post_id":"cj1p5q121000edkw3v4e9qykc","category_id":"cj1p5q12m0011dkw30gjhhgoq","_id":"cj1p5q12q0018dkw3mkaarsw9"},{"post_id":"cj1p5q125000hdkw3e4fh3uip","category_id":"cj1p5q12m0011dkw30gjhhgoq","_id":"cj1p5q12x001cdkw30qt46zl6"},{"post_id":"cj1p5q127000idkw3s1i8dpfj","category_id":"cj1p5q12s0019dkw30vlsma0r","_id":"cj1p5q12z001gdkw3s7v16d2m"},{"post_id":"cj1p5q12b000mdkw3j9ejri0n","category_id":"cj1p5q12x001ddkw3ij37lq17","_id":"cj1p5q131001kdkw3u7xvicno"},{"post_id":"cj1p5q12e000odkw3k9qgbnbe","category_id":"cj1p5q130001hdkw3azkjb8xx","_id":"cj1p5q132001odkw3j85qdrdo"},{"post_id":"cj1p5q12h000tdkw3qusov43b","category_id":"cj1p5q131001ldkw38nzvrf42","_id":"cj1p5q133001qdkw3blcfiycu"}],"PostTag":[{"post_id":"cj1p5q10x0001dkw33lqs6ajc","tag_id":"cj1p5q11l0005dkw3q73w00xj","_id":"cj1p5q11x000bdkw3ktokl0rv"},{"post_id":"cj1p5q1150003dkw32bny7ol8","tag_id":"cj1p5q11w000adkw3fv5nftei","_id":"cj1p5q12c000ndkw31373ql5m"},{"post_id":"cj1p5q1150003dkw32bny7ol8","tag_id":"cj1p5q123000gdkw37d3on3q9","_id":"cj1p5q12g000qdkw38t4igbmh"},{"post_id":"cj1p5q12b000mdkw3j9ejri0n","tag_id":"cj1p5q123000gdkw37d3on3q9","_id":"cj1p5q12j000udkw36msa8sp9"},{"post_id":"cj1p5q11m0006dkw347volm5k","tag_id":"cj1p5q11w000adkw3fv5nftei","_id":"cj1p5q12j000wdkw3ymli5c8x"},{"post_id":"cj1p5q11p0007dkw3nsi78go3","tag_id":"cj1p5q12h000sdkw3adl6rg8b","_id":"cj1p5q12l000zdkw3bdkvht5c"},{"post_id":"cj1p5q11r0008dkw3mfgnfnhg","tag_id":"cj1p5q12k000ydkw3zmavf3yu","_id":"cj1p5q12m0013dkw37hef32jc"},{"post_id":"cj1p5q11x000cdkw34ns7dezj","tag_id":"cj1p5q12m0012dkw347isa4to","_id":"cj1p5q12q0017dkw3qf0kdcgd"},{"post_id":"cj1p5q121000edkw3v4e9qykc","tag_id":"cj1p5q12p0016dkw3hz7qxh0h","_id":"cj1p5q12w001bdkw3zgrrku2s"},{"post_id":"cj1p5q125000hdkw3e4fh3uip","tag_id":"cj1p5q12p0016dkw3hz7qxh0h","_id":"cj1p5q12y001fdkw3tpkx8dwp"},{"post_id":"cj1p5q127000idkw3s1i8dpfj","tag_id":"cj1p5q12y001edkw30l8xjde7","_id":"cj1p5q130001jdkw3if0m74e7"},{"post_id":"cj1p5q12e000odkw3k9qgbnbe","tag_id":"cj1p5q130001idkw38hbg4xs7","_id":"cj1p5q132001ndkw3gwpc5fo2"},{"post_id":"cj1p5q12h000tdkw3qusov43b","tag_id":"cj1p5q131001mdkw34rhb7jmn","_id":"cj1p5q134001rdkw3zla4muub"},{"post_id":"cj1p5q12h000tdkw3qusov43b","tag_id":"cj1p5q133001pdkw36vkm4ioa","_id":"cj1p5q135001sdkw36hbnplw3"}],"Tag":[{"name":"idea","_id":"cj1p5q11l0005dkw3q73w00xj"},{"name":"android","_id":"cj1p5q11w000adkw3fv5nftei"},{"name":"gradle","_id":"cj1p5q123000gdkw37d3on3q9"},{"name":"atom","_id":"cj1p5q12h000sdkw3adl6rg8b"},{"name":"css","_id":"cj1p5q12k000ydkw3zmavf3yu"},{"name":"hexo","_id":"cj1p5q12m0012dkw347isa4to"},{"name":"git","_id":"cj1p5q12p0016dkw3hz7qxh0h"},{"name":"java","_id":"cj1p5q12y001edkw30l8xjde7"},{"name":"tomcat","_id":"cj1p5q130001idkw38hbg4xs7"},{"name":"javascript","_id":"cj1p5q131001mdkw34rhb7jmn"},{"name":"闭包","_id":"cj1p5q133001pdkw36vkm4ioa"}]}}